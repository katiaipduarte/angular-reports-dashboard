{
    "pipes": [
        {
            "name": "InitialsPipe",
            "id": "pipe-InitialsPipe-e8272249359c49e15fcc02514ae506a54b6c32ab525d895b2971150e6abd590bf0bd6ed0eec33bd9f511ec67b36247d7f498c6e7c91bddf2af5bd5499d0c769f",
            "file": "src/app/shared/pipes/initials/initials.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "initials",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'initials',\n})\nexport class InitialsPipe implements PipeTransform {\n  transform(string: string): string {\n    if (string !== '') {\n      const fullName: string[] = string.split(' ');\n\n      const firstName: string = fullName.shift() || '';\n      let initials: string = firstName?.charAt(0) || '';\n\n      if (fullName.length > 0) {\n        initials += fullName.pop()?.charAt(0) || '';\n      } else {\n        initials += firstName?.charAt(1) || '';\n      }\n\n      return initials.toUpperCase();\n    }\n\n    return '';\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Button",
            "id": "interface-Button-867c8638f6626059328e909a1d3b7b21a66b4b6e93124e9dd09096784d1cecd745c309763c3182e78c08e43c58001516dd023ff353c04bd8614b4309bec77f70",
            "file": "src/app/shared/ui/button/models/button.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ButtonSize } from '../enums/button-size.enum';\nimport { ButtonTypes } from '../enums/button-type.enum';\n\nexport interface Button {\n  textLabel: string;\n  primaryButton: boolean;\n  iconName: string;\n  buttonType: ButtonTypes;\n  buttonSize: ButtonSize;\n  ariaLabel: string;\n  testAttr: string;\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "buttonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonSize",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "buttonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonTypes",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "primaryButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "testAttr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DonutChart",
            "id": "interface-DonutChart-6e190dd69861b0247d12b2b7d8126f6c50e29eb24e9d78f36de916ae3dcde6b415d93a9537a880402f327cd1ada3f565706c63492a193df96201791a9c1c59e6",
            "file": "src/app/shared/ui/donut-chart/models/donut-chart.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DonutChartDataPoints } from './donut-chart-data-points.interface';\n\nexport interface DonutChart {\n  tooltip: {\n    trigger: string;\n    showContent: boolean;\n  };\n  toolbox: {\n    show: boolean;\n  };\n  legend: {\n    show: boolean;\n  };\n  color: string[];\n  series: [\n    {\n      name: string;\n      data: DonutChartDataPoints[];\n      type: string;\n      emphasis: {\n        focus: string;\n      };\n      label: {\n        formatter: string;\n      };\n      radius: string[];\n      animationDelay: (idx: number) => number;\n      lineStyle: {\n        width: number;\n        type: string;\n      };\n    },\n  ];\n  animationEasing: string;\n  animationDelayUpdate: (idx: number) => number;\n}\n",
            "properties": [
                {
                    "name": "animationDelayUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "animationEasing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "legend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[literal type]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "toolbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DonutChartButton",
            "id": "interface-DonutChartButton-e0b42a22f63bf73ddbae90b619856044b2c0cbb96799d88dfea94fd6f75ce9ffe8946713be4e4af6bd9e605d70c53acf99dcb9e2f90ffe53c9f8ca94311dddc1",
            "file": "src/app/shared/ui/donut-chart/models/donut-chart-button.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DonutChartButton {\n  key: string;\n  description: string;\n  isActive: boolean;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DonutChartData",
            "id": "interface-DonutChartData-717d2e487211aad8a30e21242689f550092b0a3711da47b09ac2973f7ff65860c50883df99a39ae9ac719654db54debc112b3e60f87d3094bb72032835587161",
            "file": "src/app/shared/ui/donut-chart/models/donut-chart-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DonutChartDataPoints } from './donut-chart-data-points.interface';\n\nexport interface DonutChartData {\n  series: DonutChartDataPoints[];\n  color: string[];\n  key: string;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DonutChartDataPoints[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DonutChartDataPoints",
            "id": "interface-DonutChartDataPoints-b1196666111c64fd9e838ab43e1da61f8a86d24ffb8033973dc5202bc919f62e34df1d4eee1421e928bd4709a7f9d923dd732e8248bf36675140f678fe2f1a4f",
            "file": "src/app/shared/ui/donut-chart/models/donut-chart-data-points.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DonutChartDataPoints {\n  value: number;\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DropdownItem",
            "id": "interface-DropdownItem-f8a4d05cd2bf6b787df9f4b3e1998f4a7e0f0bd804a3b3ca294aeb97eea109864ab05b5cb48e4340ff3cdc438c8f44d2c8d948e3bb5a57106f27f40a03269b8c",
            "file": "src/app/shared/ui/dropdown/models/dropdown-item.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DropdownItem {\n  itemText: string;\n  itemId: number;\n}\n",
            "properties": [
                {
                    "name": "itemId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "itemText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DropdownOptions",
            "id": "interface-DropdownOptions-bceafec10b57f135357026eafc9fe6c95606981395a03bb0bf8ad5532928892d2d785502641c0583e2394051f062d952ab07a5162425bec6b52a184c15fe0bf8",
            "file": "src/app/shared/ui/dropdown/models/dropdown-options.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DropdownItem } from '.';\n\nexport interface DropdownOptions {\n  label: string;\n  placeholder: string;\n  searchPlaceholder: string;\n  testAttr: string;\n  items: DropdownItem[];\n  selectedItemList: DropdownItem[];\n  multiSelect: boolean;\n  disabled: boolean;\n  showApplyBtn: boolean;\n  showSearch: boolean;\n  showSelectAll: boolean;\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownItem[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "multiSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "searchPlaceholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectedItemList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownItem[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "showApplyBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showSelectAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "testAttr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MessageData",
            "id": "interface-MessageData-1b1ffd77e49672a0d8dea31542bef2546f963c764f6ba57c86aeaab0bbb2a6253be9127ec8a98f03107b6c37282e8aa55e786481db8e63a8128524baea05c17e",
            "file": "src/app/shared/ui/messages/models/message-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MessageType } from '..';\n\nexport interface MessageData {\n  title?: string;\n  message: string;\n  type: MessageType;\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MessageType",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-831cac78f4b97c95fc4e5a6581fbfee00e437d1397b19678af44d25158ff8c4215746cc2f0107e4aa56a52cc92c48eec28a3d49426a736c4c186e9ae9c3344b5",
            "file": "src/app/core/services/auth/auth.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "GlobalErrorHandlerService",
            "id": "injectable-GlobalErrorHandlerService-a52c4a98a7d954fcde59cfb0e1c2dae01e3d9806230517bf4efddf8afd04227c29cc350211fe5c882f9af6909e03b654c970875618cf77551333b31e24fe9c8c",
            "file": "src/app/core/services/global-error-handler/global-error-handler.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable, isDevMode } from '@angular/core';\nimport { MessageType, ToastService } from '@message';\nimport { Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalErrorHandlerService implements ErrorHandler {\n  constructor(private httpClient: HttpClient, private toastService: ToastService) {}\n\n  // TODO: Create a service/method to send the error message to Logs in production env\n  public handleError(err: HttpErrorResponse): Observable<never> {\n    if (isDevMode()) {\n      console.error(err);\n    }\n\n    const message = err && err.error && err.error.detail ? err.error.detail : 'There was a problem connecting with the server.';\n\n    this.toastService.openSnackBar({\n      title: message,\n      message: '',\n      type: MessageType.Error,\n    });\n\n    return throwError(() => message);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoaderService",
            "id": "injectable-LoaderService-a43338cab9558d3a68f80a98d5dabdf962f33cc4096ba52127663ff29c15c0283543d4c6a34ca3c00e90083d8ae19a9ab39bc2ef7e41b6174002e18c858429a6",
            "file": "src/app/shared/ui/loader/services/loader.service.ts",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoaderService {\n  public isLoading: BehaviorSubject<boolean>;\n\n  constructor() {\n    this.isLoading = new BehaviorSubject<boolean>(false);\n  }\n\n  public show(): void {\n    this.isLoading.next(true);\n  }\n\n  public hide(): void {\n    this.isLoading.next(false);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-88d8f9647f55795b950b0e965033f581f7a9194ad1482f10825fd39efccfe04585045141a86df34ed05da9ab3e18df7fa0aaafd479ee52cc6257d1ab90b0f574",
            "file": "src/app/shared/ui/messages/services/toast.service.ts",
            "properties": [
                {
                    "name": "snackBarConfig",
                    "defaultValue": "{\n    duration: 3000,\n    verticalPosition: 'top',\n    horizontalPosition: 'right',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarConfig",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dismissSnackBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "data",
                            "type": "MessageData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MessageData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { MessageData, MessageType } from '..';\nimport { ToastComponent } from '../components';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastService {\n  private snackBarConfig: MatSnackBarConfig = {\n    duration: 3000,\n    verticalPosition: 'top',\n    horizontalPosition: 'right',\n  };\n\n  constructor(private snackBar: MatSnackBar) {}\n\n  public openSnackBar(data: MessageData): void {\n    const _type: MessageType = data.type !== undefined ? data.type : MessageType.Info;\n\n    this.snackBar.openFromComponent(ToastComponent, {\n      ...this.snackBarConfig,\n      data: { title: data.title, message: data.message, type: _type },\n    });\n  }\n\n  public dismissSnackBar(): void {\n    this.snackBar.dismiss();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-a1186230e42dad5deb51b46ddd55f16db475c96cd03c45c9c8f17316064cf0a4849c8189fd7902db819dea7325ead3347a533fb595560cae540acd8fc09c1719",
            "file": "src/app/core/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<Object>>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  public intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<Object>> {\n    let authReq = req;\n\n    if (req.url.includes('/oauth2/token')) {\n      // authReq = req.clone({\n      //   headers: req.headers.set('Authorization', `Basic ${btoa(`${env.clientId}:${env.clientSecret}`)}`),\n      // });\n    } else if (!req.url.includes('https://')) {\n      if (req.url.includes('/assets')) {\n        const baseUrl = document.baseURI;\n        const asset = req.url.split('/assets/');\n\n        authReq = req.clone({\n          url: `${baseUrl}assets/${asset[1]}`,\n        });\n      } else {\n        // let token = this.authStorage.getItem('access_token');\n        // authReq = req.clone({\n        //   url: `${env.baseUrl}/${req.url}`,\n        //   headers: req.headers.set('Authorization', `Bearer ${token}`),\n        // });\n      }\n    }\n\n    return next.handle(authReq);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "interceptor"
        },
        {
            "name": "LoaderInterceptor",
            "id": "injectable-LoaderInterceptor-4c5965c937faaa2f50025ed1ec97962e2ff4caa42d1f95b74c846143904de2f6df69606f106090990bf7e679f494f7bed07fbe8afa9188434f204c6b13452439",
            "file": "src/app/shared/ui/loader/interceptors/loader.interceptor.ts",
            "properties": [
                {
                    "name": "requestsCompleted",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "totalRequests",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { finalize, Observable } from 'rxjs';\nimport { LoaderService } from '../services/loader.service';\n\n@Injectable()\nexport class LoaderInterceptor implements HttpInterceptor {\n  public totalRequests = 0;\n  public requestsCompleted = 0;\n\n  constructor(private loaderService: LoaderService) {}\n\n  public intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (!req.url.includes('/assets')) {\n      this.loaderService.show();\n      this.totalRequests++;\n    }\n\n    return next.handle(req).pipe(\n      finalize(() => {\n        if (!req.url.includes('/assets')) {\n          this.requestsCompleted++;\n          if (this.requestsCompleted === this.totalRequests) {\n            this.totalRequests = 0;\n            this.requestsCompleted = 0;\n            this.loaderService.hide();\n          }\n        }\n      }),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "EnsureModuleImportedOnceGuard",
            "id": "class-EnsureModuleImportedOnceGuard-987d24bf497d0c6cbafaf739b4ab1e7cf52fcb69a303fbcdf34b15414e899bb53b63088841284375bfc60a869b7b10f5a96e091603e2cda95c4bfa944563a3df",
            "file": "src/app/core/guards/ensure-module-imported-once.guard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class EnsureModuleImportedOnceGuard {\n  protected constructor(targetModule: unknown, moduleName: string) {\n    if (targetModule) {\n      throw new Error(`${moduleName} has already been loaded. Import this module in the AppModule only.`);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "targetModule",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "moduleName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "targetModule",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "moduleName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "description": "<p>This abstract class used for module building by extending this class\nprevents importing the module into somewhere else than root App Module.</p>\n",
            "rawdescription": "\n\nThis abstract class used for module building by extending this class\nprevents importing the module into somewhere else than root App Module.\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoaderConsumer",
            "id": "class-LoaderConsumer-f178281fbb4318e331e2ccd0281690b234be7d358acdadd5cf700fd7424b3377ea41eefb5ca2d765e05dfbfc06600a1ad83720036cdadf19055c899da2cc9f12",
            "file": "src/app/shared/ui/loader/mocks/loader-consumer.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LoaderService } from '../services/loader.service';\n\nexport class LoaderConsumer {\n  isBusy = false;\n\n  constructor(private loaderService: LoaderService) {\n    this.loaderService.isLoading.subscribe((value: boolean) => {\n      this.isBusy = value;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isBusy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ce75594999580f2d9fddf481c0674f0bdcc9097f375006e8498005c290dbf6fb88956d8eed21a89c57bce4b4426a5f8a9fcb092d85829813cf39ae22dc4e1236",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<router-outlet></router-outlet>`,\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-aba67eb568de3f9f6401e037ae201d7c77c9ce69b71df43a7faf260e2a685df3637c810e6411eb30c0b7734d9db686ee7a3418a1b0f793ffe84665297060aab1-1",
            "file": "src/app/shared/ui/button/components/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "btn",
                    "defaultValue": "{\n    textLabel: 'Default',\n    primaryButton: true,\n    iconName: '',\n    buttonType: ButtonTypes.NormalButton,\n    buttonSize: ButtonSize.Medium,\n    ariaLabel: '',\n    testAttr: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Button",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ButtonSize } from '../enums/button-size.enum';\nimport { ButtonTypes } from '../enums/button-type.enum';\nimport { Button } from '../models/button.interface';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  @Input() btn: Button = {\n    textLabel: 'Default',\n    primaryButton: true,\n    iconName: '',\n    buttonType: ButtonTypes.NormalButton,\n    buttonSize: ButtonSize.Medium,\n    ariaLabel: '',\n    testAttr: '',\n  };\n\n  @Input() disabled: boolean = false;\n\n  @Output() btnClicked: EventEmitter<void> = new EventEmitter();\n\n  public clickBtn(): void {\n    this.btnClicked.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button {\n  display: flex;\n  justify-content: center !important;\n  align-items: center !important;\n  border-radius: 4px;\n\n  &-large {\n    width: 162px;\n    height: 56px;\n  }\n  &-medium {\n    width: 165px;\n    height: 48px;\n  }\n  &-small {\n    width: 114px;\n    height: 40px;\n  }\n  &-xsmall {\n    width: 135px;\n    height: 32px;\n  }\n}\n\n.primary,\n.secondary {\n  span {\n    text-align: center;\n  }\n}\n\n.primary {\n  background-color: $aqua;\n  color: white;\n\n  &:hover:not(:disabled) {\n    background-color: #21b1aa;\n  }\n}\n\n.secondary {\n  background-color: white;\n  border: solid 1px $aqua;\n  color: $aqua;\n\n  &:hover:not(:disabled) {\n    background-color: $aqua;\n    color: white;\n  }\n}\n\n.button-icon {\n  fill: white;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<p>button works!</p>\n"
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-3f3261e6ddb21fd10f2221c6aad9a9d7f72f053ca7d3febcae9a0dfdb16d758058dd286b7423d510c6093ba76d5a7ed8729208d52baa50b99a9297e574c0d3ee",
            "file": "src/app/shared/ui/datepicker/components/datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-datepicker",
            "styleUrls": [
                "./datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-datepicker',\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.scss'],\n})\nexport class DatepickerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {\n    console.log();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>datepicker works!</p>\n"
        },
        {
            "name": "DonutChartComponent",
            "id": "component-DonutChartComponent-f1acb74e8330aafaf9f3ce5ee1baf4c16b23160438aa8c75f5fe5243e4c8de93979d682758e878b086f6f65078534f249841030765948de55ab9b3942becbce6",
            "file": "src/app/shared/ui/donut-chart/components/donut-chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-donut-chart",
            "styleUrls": [
                "./donut-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./donut-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "chartButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "DonutChartButton[]",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "DonutChartData | undefined",
                    "decorators": []
                },
                {
                    "name": "dateFilterEnabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "resultsData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ChartResults[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeChartButtonChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePillSelection",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ChartResults } from '@result-chart';\nimport { EChartsOption } from 'echarts';\nimport { DonutChartButton, DonutChartData } from '../models';\n\n@Component({\n  selector: 'app-donut-chart',\n  templateUrl: './donut-chart.component.html',\n  styleUrls: ['./donut-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DonutChartComponent implements OnChanges {\n  @Input() title: string = '';\n  @Input() resultsData: ChartResults[] = [];\n  @Input() chartButtons: DonutChartButton[] = [];\n  @Input()\n  dateFilterEnabled!: boolean;\n  @Input() chartData: DonutChartData | undefined;\n\n  @Output() activeChartButtonChange: EventEmitter<string> = new EventEmitter();\n\n  public chartOption!: EChartsOption;\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes['chartData'] && changes['chartData'].currentValue) {\n      this.drawChart();\n    }\n  }\n\n  public changePillSelection(key: string): void {\n    this.activeChartButtonChange.emit(key);\n  }\n\n  private drawChart(): void {\n    this.chartOption = {\n      tooltip: {\n        trigger: 'axis',\n        showContent: true,\n      },\n      toolbox: {\n        show: false,\n      },\n      legend: {\n        show: false,\n      },\n      color: this.chartData?.color,\n      series: [\n        {\n          name: this.chartData?.key,\n          data: this.chartData?.series,\n          type: 'pie',\n          emphasis: {\n            focus: 'self',\n          },\n          label: {\n            formatter: '{b}: ({d}%)',\n          },\n          radius: ['40%', '70%'],\n          animationDelay: (idx) => idx * 10,\n          lineStyle: {\n            width: 3,\n            type: 'solid',\n          },\n        },\n      ],\n      animationEasing: 'elasticOut',\n      animationDelayUpdate: (idx) => idx * 10,\n    } as EChartsOption;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".donut-chart-wrapper {\n  height: 472px;\n  margin: 32px 0 0 0;\n  padding: 32px 26px 32px 32px;\n  border-radius: 8px;\n  background-color: white;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  flex-basis: 0;\n  flex-grow: 1;\n\n  .donut-chart-body {\n    width: calc(100% - 207px);\n\n    .donut-chart-header {\n      display: flex;\n      flex-wrap: wrap;\n      flex-direction: row;\n      flex-basis: 0;\n      flex-grow: 1;\n\n      h5 {\n        font-size: 14px;\n        font-weight: 600;\n        line-height: 1.43;\n        letter-spacing: 1px;\n        color: #213f66;\n        display: inline-block;\n        margin-right: 16px;\n        text-transform: uppercase;\n      }\n    }\n  }\n\n  .donut-chart-sidebar {\n    width: 207px;\n    border-left: solid 1px #e8eefa;\n  }\n\n  .empty-message {\n    padding: 80px 0 32px 0;\n    margin: auto;\n    text-align: center;\n\n    img {\n      width: 264px;\n      height: 176px;\n      margin-bottom: 24px;\n    }\n\n    h6 {\n      font-size: 20px;\n      line-height: 1.4;\n      color: #213f66;\n      margin-bottom: 8px;\n    }\n\n    p {\n      font-size: 16px;\n      line-height: 1.5;\n      color: #445973;\n    }\n  }\n}\n",
                    "styleUrl": "./donut-chart.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"donut-chart-wrapper\" data-test=\"donut-chart-wrapper\">\n  <div class=\"donut-chart-body\">\n    <div class=\"donut-chart-header\">\n      <ng-container *ngFor=\"let btn of chartButtons\">\n        <div>\n          <!-- <app-pil\n            [content]=\"btn.description\"\n            [selectedStatus]=\"btn.isActive\"\n            (click)=\"changePillSelection(btn.key)\"\n            [attr.data-test]=\"'donut-chart-pill-' + btn.key\"\n          ></app-pill> -->\n        </div>\n      </ng-container>\n    </div>\n    <div class=\"donut-chart\">\n      <div *ngIf=\"!!chartData\" echarts [options]=\"chartOption\" [autoResize]=\"true\"></div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-4fdd6af5df5bdb15040fe7f4fa01d47d1132be55819d4c0c53dc21189c69bb5beba684a7bd1e4614b8f9143b85ccc56233f22aa24df992831f4ab9e4ddad0fe2",
            "file": "src/app/shared/ui/dropdown/components/dropdown.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "DropdownOptions",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemSelected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<DropdownItem[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mySelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelect",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mySelect'"
                        }
                    ]
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleApplyBtnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "Record<string | >",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Record<string | >",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onCloseDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatSelect } from '@angular/material/select';\nimport { DropdownOptions } from '../../models';\nimport { DropdownItem } from '../../models/dropdown-item.interface';\n\n@Component({\n  selector: 'app-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DropdownComponent implements OnInit {\n  @Input()\n  options!: DropdownOptions;\n  @Output() itemSelected: EventEmitter<DropdownItem[]> = new EventEmitter();\n  @ViewChild('mySelect')\n  mySelect!: MatSelect;\n\n  public searchText = '';\n  public selectedValue: number[] = [];\n  public isOpen = false;\n\n  public ngOnInit(): void {\n    if (!!this.options) {\n      this.selectedValue = this.options.selectedItemList.map((i) => i.itemId);\n    }\n  }\n\n  public onCloseDropdown(): void {\n    this.isOpen = false;\n    if (this.searchText !== '' && this.options.selectedItemList.length === 0) {\n      this.selectedValue = [];\n    }\n\n    this.searchText = '';\n\n    if (this.options.selectedItemList.length > 0) {\n      this.itemSelected.emit(this.options.selectedItemList);\n    }\n  }\n\n  public handleSelected(item: Record<string, unknown>): void {\n    const selectedItem: DropdownItem = item as unknown as DropdownItem;\n    if (this.options.multiSelect) {\n      if (this.options.selectedItemList.findIndex((i) => i.itemId === selectedItem.itemId) >= 0) {\n        this.options.selectedItemList = this.options.selectedItemList.filter((i) => i.itemId !== selectedItem.itemId);\n      } else {\n        this.options.selectedItemList.push(selectedItem);\n      }\n    } else {\n      this.options.selectedItemList.splice(0, this.options.selectedItemList.length);\n      this.options.selectedItemList[0] = selectedItem;\n    }\n\n    if (!this.options.showApplyBtn) {\n      this.itemSelected.emit(this.options.selectedItemList);\n    }\n  }\n\n  public handleApplyBtnClick(): void {\n    this.itemSelected.emit(this.options.selectedItemList);\n    this.isOpen = !this.isOpen;\n    this.mySelect.toggle();\n  }\n\n  public selectAll(): void {\n    this.options.selectedItemList = this.options.items;\n    this.selectedValue = this.options.items.map((item) => item.itemId);\n\n    if (!this.options.showApplyBtn) {\n      this.itemSelected.emit(this.options.selectedItemList);\n    }\n  }\n\n  public clear(): void {\n    this.options.selectedItemList = [];\n    this.selectedValue = [];\n\n    if (!this.options.showApplyBtn) {\n      this.itemSelected.emit(this.options.selectedItemList);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".rounded-dropdown {\n  .outside-label {\n    font-size: 16px;\n    line-height: 1.5;\n    color: #213f66;\n    cursor: default;\n    display: inline-block;\n    margin-right: 8px;\n    vertical-align: top;\n    padding-top: 5px;\n  }\n\n  .dropdown {\n    display: inline-block;\n    width: auto;\n\n    &.mat-form-field-disabled {\n      cursor: not-allowed;\n\n      .mat-form-field-flex {\n        background-color: #f8fafd !important;\n      }\n\n      .mat-select-disabled .mat-select-trigger,\n      .mat-button-wrapper,\n      .dropdown-content,\n      .dropdown-selected-content {\n        cursor: not-allowed;\n      }\n\n      path {\n        fill: #9aa4b8;\n      }\n\n      .dropdown-content,\n      .dropdown-selected-content {\n        color: $smoke;\n      }\n    }\n\n    .dropdown-content,\n    .dropdown-selected-content {\n      font-size: 14px;\n      font-weight: 400;\n      line-height: 1.43;\n      color: #445973;\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      max-width: 135px;\n      display: inline-block;\n      height: 21px;\n      cursor: pointer;\n    }\n\n    .dropdown-selected-content {\n      font-weight: 600;\n\n      .mat-badge-medium.mat-badge-overlap.mat-badge-after .mat-badge-content {\n        right: -16px;\n        top: 2px;\n        line-height: 1.33;\n        width: 16px;\n        height: 16px;\n      }\n\n      .multiple-items-selected {\n        margin-left: 23px;\n      }\n    }\n\n    .mat-form-field-wrapper .mat-form-field-flex {\n      border: solid 1px #d8dfed;\n      border-radius: 28px;\n      height: 35px;\n      width: 175px;\n      padding: 0 4px 0 16px;\n\n      .mat-form-field-infix {\n        padding: 0;\n        border: 0;\n      }\n    }\n    .mat-form-field-appearance-outline .mat-form-field-outline-thick {\n      color: $light-grey;\n    }\n\n    .mat-select-arrow {\n      opacity: 0;\n    }\n\n    .mat-select-value-text {\n      // @include mat.typography-level($lgc-typography-config, caption);\n      color: $slate;\n\n      span {\n        vertical-align: super;\n        font-size: 14px;\n        font-weight: 600;\n        line-height: 1.43;\n        color: #445973;\n      }\n\n      &:disabled {\n        color: $smoke;\n      }\n    }\n\n    .select-dropdown {\n      border: none;\n      background: transparent;\n      color: $aqua;\n    }\n  }\n}\n\n//dropdow + search input\n.mat-select-panel-wrap {\n  width: 367px;\n  .selectPanel {\n    margin-top: 8px;\n    margin-left: 18px;\n    min-width: calc(100% + 13px) !important;\n    max-height: none !important;\n\n    .search-field {\n      // border-bottom: 1px solid $light-grey;\n      padding: 12px 16px;\n      height: 48px;\n      margin-top: 5px;\n\n      .mat-input-element {\n        // @include mat.typography-level($lgc-typography-config, button);\n        color: $storm;\n        align-items: center;\n        width: calc(100% - 94px);\n        margin-left: 8px;\n        height: 28px;\n      }\n\n      .select-all-btn {\n        height: 28px;\n        display: inline-block;\n        vertical-align: text-bottom;\n        padding-top: 3px;\n\n        a {\n          font-size: 16px;\n          font-weight: 300;\n          color: #27d1c9;\n        }\n      }\n    }\n\n    .mat-option {\n      // This is causing a re-focus when selection options\n      height: 48px;\n      margin: 0;\n\n      &.mat-active,\n      &:hover:not(.mat-option-disabled),\n      &:focus:not(.mat-option-disabled) {\n        background-color: white;\n        .mat-option-text {\n          color: $aqua;\n        }\n      }\n\n      &.mat-selected {\n        background-color: #f6fefd;\n        .mat-option-text {\n          color: $aqua;\n        }\n      }\n\n      .mat-option-text {\n        // @include mat.typography-level($lgc-typography-config, button);\n        color: $slate;\n        cursor: pointer;\n\n        .mat-icon {\n          float: right;\n        }\n      }\n\n      .mat-pseudo-checkbox {\n        display: none;\n      }\n    }\n\n    footer {\n      height: 72px;\n      padding: 16px;\n      box-shadow: 0 1px 8px 0 rgba(95, 109, 179, 0.16);\n      margin-top: 1px;\n      button {\n        width: 288px;\n        height: 40px;\n        padding: 8px 90px 8px 93px;\n        border-radius: 4px;\n        background-color: #27d1c9;\n        font-size: 16px;\n        font-weight: 600;\n        line-height: 1.5;\n        text-align: center;\n        color: white;\n        margin: 0 auto;\n        display: block;\n      }\n    }\n  }\n}\n\n.mat-select-value-text {\n  display: none;\n}\n",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"rounded-dropdown\" *ngIf=\"options !== undefined\">\n  <mat-label data-test=\"select-label\" class=\"outside-label\">{{ options.label }}</mat-label>\n  <mat-form-field class=\"dropdown\" appearance=\"fill\" [attr.data-test]=\"options.testAttr\" floatLabel=\"never\">\n    <p\n      *ngIf=\"options.selectedItemList.length === 0 && options.items.length !== 0\"\n      data-test=\"selected-option\"\n      class=\"dropdown-content\"\n    >\n      {{ options.placeholder }}\n    </p>\n    <p *ngIf=\"options.items.length === 0\" data-test=\"selected-option\" class=\"dropdown-content\">No Items</p>\n    <p *ngIf=\"options.selectedItemList.length === 1\" data-test=\"selected-option\" class=\"dropdown-selected-content\">\n      {{options.selectedItemList[0].itemText}}\n    </p>\n    <p\n      *ngIf=\"options.multiSelect && options.selectedItemList.length > 1\"\n      data-test=\"selected-option\"\n      class=\"dropdown-selected-content\"\n    >\n      <span matBadge=\"{{options.selectedItemList.length}}\" class=\"select-count\"></span>\n      <span class=\"multiple-items-selected\">Items Selected</span>\n    </p>\n\n    <mat-select\n      #mySelect\n      panelClass=\"selectPanel\"\n      [multiple]=\"options.multiSelect\"\n      [(value)]=\"selectedValue\"\n      (closed)=\"onCloseDropdown()\"\n      (opened)=\"isOpen = true\"\n      [disabled]=\"options.disabled || options.items.length === 0\"\n      disableOptionCentering\n    >\n      <div class=\"search-field\" *ngIf=\"options.showSearch && options.items.length > 5\">\n        <mat-icon svgIcon=\"search\" class=\"search-icon\"></mat-icon>\n        <input\n          placeholder=\"{{options.searchPlaceholder}}\"\n          matInput\n          type=\"text\"\n          name=\"searchText\"\n          data-test=\"dropdown-search-input\"\n          [(ngModel)]=\"searchText\"\n          [ngModelOptions]=\"{standalone: true}\"\n        />\n        <div *ngIf=\"options.multiSelect && options.showSelectAll\" class=\"select-all-btn\">\n          <a *ngIf=\"options.selectedItemList.length > 0\" (click)=\"clear()\" data-test=\"dropdown-search-clear\">Clear</a>\n          <a *ngIf=\"options.selectedItemList.length === 0\" (click)=\"selectAll()\" data-test=\"dropdown-search-select-all\"\n            >Select All</a\n          >\n        </div>\n      </div>\n      <mat-option\n        *ngFor=\"let item of options.items | filter: 'itemText':searchText:'includes'; let i = index\"\n        (click)=\"handleSelected(item)\"\n        (keyup.enter)=\"handleSelected(item)\"\n        [value]=\"item['itemId']\"\n        attr.data-test=\"option-{{i}}\"\n        class=\"mat-subheading-1\"\n        #matOption\n      >\n        {{item['itemText']}}<mat-icon *ngIf=\"matOption.selected\" svgIcon=\"select-tick\"></mat-icon>\n      </mat-option>\n      <footer *ngIf=\"options.showApplyBtn\">\n        <button mat-raised-button (click)=\"handleApplyBtnClick()\">Apply selection</button>\n      </footer>\n    </mat-select>\n    <div matSuffix>\n      <button mat-icon-button class=\"select-dropdown\" [disabled]=\"options.disabled || options.items.length === 0\">\n        <mat-icon *ngIf=\"!isOpen\" svgIcon=\"select-open\"></mat-icon>\n        <mat-icon *ngIf=\"isOpen\" svgIcon=\"select-close\"></mat-icon>\n      </button>\n    </div>\n  </mat-form-field>\n</div>\n"
        },
        {
            "name": "EmptyLayoutComponent",
            "id": "component-EmptyLayoutComponent-f38b444ce910a46c806e0763c4b4cb84de2c66c906cdb86e68f8d837c644010e0352003e13cee3505702ec0747a9c3b411acd015eecca8cf797160cf12f0eccc",
            "file": "src/app/shared/ui/empty-layout/components/empty-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-empty-layout",
            "styleUrls": [
                "./empty-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headingText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholderImage",
                    "defaultValue": "'signed-out'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subheadingText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-empty-layout',\n  templateUrl: './empty-layout.component.html',\n  styleUrls: ['./empty-layout.component.scss'],\n})\nexport class EmptyLayoutComponent {\n  @Input() headingText = '';\n  @Input() subheadingText = '';\n  @Input() placeholderImage: string = 'signed-out';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./empty-layout.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n  <h3></h3>\n  <p></p>\n  <img src=\"\" alt=\"Empty Page\" />\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-c065ef378127b081e8acacbdc1f5721b6a51072f984f2bf3ca65be775f7cbc333187639395252332e5b56c66a836bb66040d6a75dd6a15cf754fda91e49c0663",
            "file": "src/app/core/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "username",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { UntilDestroy } from '@ngneat/until-destroy';\n\n@UntilDestroy({ checkProperties: true })\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss'],\n})\nexport class LayoutComponent implements OnInit {\n  public loading = false;\n\n  private username: string = '';\n\n  constructor() {}\n\n  public ngOnInit(): void {\n    console.log();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@angular/material' as mat;\n@import 'mat-lgc-typography';\n@import 'mat-lgc-colours';\n\n.navbar {\n  height: 68px;\n  padding: 14px 22px;\n  border-bottom: 1px solid $light-grey;\n  background-color: white;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  .logo {\n    width: 119px;\n    height: 40px;\n    margin: 0 15px 1px 0;\n  }\n\n  app-menu {\n    width: 265px;\n    height: 50px;\n  }\n}\n\n.sidenav-container {\n  height: calc(100vh - 69px);\n  mat-sidenav {\n    min-width: 100px;\n    border-right: 1px solid $light-grey;\n    background-color: white;\n\n    mat-nav-list {\n      padding-top: 26px;\n      a {\n        height: 80px;\n        margin-bottom: 10px;\n        cursor: pointer;\n\n        &.active {\n          border-right: solid 2px mat.get-color-from-palette($mat-lgc-primary, 600);\n        }\n\n        &.icon-stroke {\n          button {\n            .mat-icon {\n              stroke: $storm;\n              color: transparent;\n            }\n          }\n        }\n\n        &.active,\n        &:hover {\n          cursor: pointer;\n          background-color: transparent;\n          &.icon-stroke {\n            button {\n              .mat-icon {\n                stroke: mat.get-color-from-palette($mat-lgc-primary, 600);\n                color: transparent;\n              }\n            }\n          }\n\n          button {\n            cursor: pointer;\n            span,\n            .mat-icon {\n              cursor: pointer;\n              color: mat.get-color-from-palette($mat-lgc-primary, 600);\n            }\n          }\n        }\n\n        button {\n          display: flex;\n          flex-direction: column;\n          height: inherit;\n          width: 100px;\n          align-items: center;\n          padding: 9px 0 17px 0;\n\n          span {\n            @include mat.typography-level($lgc-typography-config, input);\n            display: flex;\n          }\n\n          span,\n          .mat-icon {\n            color: $storm;\n          }\n        }\n      }\n    }\n  }\n\n  .content {\n    background-color: #f8fafd;\n    padding: 26px 64px;\n  }\n}\n",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Navbar -->\n<mat-toolbar class=\"navbar\">\n  <mat-icon svgIcon=\"logo\" class=\"logo\"></mat-icon>\n</mat-toolbar>\n\n<mat-sidenav-container class=\"sidenav-container\" *ngIf=\"!loading\">\n  <!-- Sidenav -->\n  <mat-sidenav opened=\"true\" mode=\"side\">\n    <mat-nav-list>\n      <a mat-list-item>\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"overview\"></mat-icon>\n        </button>\n      </a>\n      <a\n        mat-list-item\n        [routerLink]=\"['/insights-centre']\"\n        routerLinkActive=\"active\"\n        *appHasRole=\"permissions.ReadInsights\"\n        class=\"icon-stroke\"\n      >\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"insights-center\"></mat-icon>\n          <span>Insights</span>\n        </button>\n      </a>\n      <a mat-list-item [routerLink]=\"['/participants']\" *appHasRole=\"permissions.PHI\">\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"participants\"></mat-icon>\n          <span>Participants</span>\n        </button>\n      </a>\n      <a mat-list-item [routerLink]=\"['/users']\" *appHasRole=\"permissions.CreateUser\">\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"users\"></mat-icon>\n          <span>Users</span>\n        </button>\n      </a>\n    </mat-nav-list>\n  </mat-sidenav>\n\n  <!-- Main Content -->\n  <mat-sidenav-content class=\"content\">\n    <router-outlet></router-outlet>\n    <app-loader></app-loader>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-4df3600564486609fe2a88303ae8b937029f4ae36d892b59dfd0949478e02f3bea173ba0cca74d31eb3b2b9e7c0bae017dc2c8232fac44b173adfa55fcf04a0f",
            "file": "src/app/shared/ui/loader/components/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loadingMessage",
                    "defaultValue": "'Loading...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "this.loaderService.isLoading.asObservable().pipe(map((isLoading: boolean) => !isLoading))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { LoaderService } from '../services/loader.service';\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.scss'],\n})\nexport class LoaderComponent {\n  @Input() loadingMessage: string = 'Loading...';\n\n  constructor(private loaderService: LoaderService) {}\n\n  public loading: Observable<boolean> = this.loaderService.isLoading.asObservable().pipe(map((isLoading: boolean) => !isLoading));\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".progress-loader {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 3;\n\n  mat-spinner {\n    margin-bottom: 25px;\n  }\n\n  p {\n    text-align: center;\n  }\n}\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"progress-loader\" [hidden]=\"loading | async\">\n  <mat-spinner></mat-spinner>\n  <p>{{ loadingMessage }}</p>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PillComponent",
            "id": "component-PillComponent-d1d8aedd6b8a34bb7dd55bd91e34e0b3d5a83c8b84ac551027a9c051317499961495063619b1dced39ee54a8ca70a0a5d57e096a70a1ce903bc3d52991dfcfcd",
            "file": "src/app/shared/ui/pill/components/pill.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pill",
            "styleUrls": [
                "./pill.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pill.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedStatus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-pill',\n  templateUrl: './pill.component.html',\n  styleUrls: ['./pill.component.scss'],\n})\nexport class PillComponent {\n  @Input() content: string = 'default';\n  @Input() selectedStatus: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use '@angular/material' as mat;\n@import 'mat-lgc-colours';\n@import 'mat-lgc-typography';\n\n.swatch {\n  border-radius: 30.5px;\n  margin: 0 0 0 8px;\n  align-items: center;\n  display: inline-flex;\n  cursor: pointer;\n\n  &.swatch-selected {\n    background-color: #e4f5f8;\n    border: solid 1px $teal-darkest;\n    padding: 0 12px 0 4px;\n\n    p {\n      color: $teal-darkest;\n    }\n  }\n\n  &.swatch-default {\n    background-color: $off-white;\n    border: solid 1px $storm;\n    padding: 4px 12px;\n\n    p {\n      color: $slate;\n    }\n  }\n\n  p {\n    text-transform: lowercase;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    @include mat.typography-level($lgc-typography-config, input);\n    cursor: pointer;\n\n    &:first-letter {\n      text-transform: capitalize;\n    }\n  }\n}\n",
                    "styleUrl": "./pill.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"swatch\"\n  [ngClass]=\"[\n        selectedStatus\n          ? 'swatch-selected'\n          : 'swatch-default'\n      ]\"\n>\n  <p>{{ content }}</p>\n</button>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-97171c625a401bb4984a79b6e34fcb973910acfaaaf6ee1d4e8ea4b3c112e466f6cc63f682d6fddabf475f24d8e4f20441eefd1a922eb225bddd4e0f69eab458",
            "file": "src/app/shared/ui/table/components/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n})\nexport class TableComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {\n    console.log();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>table works!</p>\n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-4417fa531822dabf1d02be76b296dd76d07dec59c28ad8bf2dee825d8e2560478604c3c16ccfcb002f5d0cb9181c2127d937b860148b625fef2abdbd06e1393c",
            "file": "src/app/shared/ui/messages/components/toast/toast.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MessageData",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\nimport { MessageData } from '../../models/message-data.interface';\nimport { ToastService } from '../../services/toast.service';\n\n@Component({\n  selector: 'app-toast',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./toast.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ToastComponent {\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: MessageData, private toastService: ToastService) {}\n\n  public close(): void {\n    this.toastService.dismissSnackBar();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "MessageData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "MessageData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p>toast works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e3ad0b5c497921ab0a4ac4282a224791543536525d52c0a9d8ebd7dd56a6f0dc23061f7a712841ed6ddd745f1272c36244221f98fa25ccf9a563a140de82b0f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { SharedModule } from './shared/shared.module';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CoreModule } from './core/core.module';\nimport { CustomMaterialModule } from './custom-material/custom-material.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, BrowserAnimationsModule, CoreModule, CustomMaterialModule, SharedModule],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "CustomMaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-02371426a07c64e6c7e033de286b3923e8563a160ef42e7d6b340bcb9422eeafa47a09e31be9939822e07b5810b1e86a435eab16507d921a730035acaf152eee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'reports',\n    loadChildren: () => \"import('./reports/reports-routing.module').then((module) => module.ReportsRoutingModule)\",\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-4279ec967e348085e9e2162c8558bcddcbc1cebb5db99cbd7e4d39905212e377e0c7ac451b76e324e5d494c9fa418119619aff7fd19fc865ca0367314fe4148a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { APP_BASE_HREF, CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CustomMaterialModule } from '@custom-material/custom-material.module';\nimport { LoaderInterceptor } from '@loader';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { EnsureModuleImportedOnceGuard } from './guards/ensure-module-imported-once.guard';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\nimport { LayoutComponent } from './layout/layout.component';\n\n@NgModule({\n  declarations: [LayoutComponent],\n  imports: [CommonModule, RouterModule, HttpClientModule, CustomMaterialModule, SharedModule],\n  providers: [\n    { provide: APP_BASE_HREF, useValue: '/' },\n    { provide: HTTP_INTERCEPTORS, useClass: LoaderInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  ],\n})\nexport class CoreModule extends EnsureModuleImportedOnceGuard {\n  // Looks for the module in the parent injector to see if it's already been loaded (only want it loaded once)\n  constructor(@SkipSelf() @Optional() parent: CoreModule) {\n    super(parent, 'CoreModule');\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "LoaderInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CustomMaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomMaterialModule",
            "id": "module-CustomMaterialModule-27bf0fa50042039002f8af38c784e6a57db66832ddf1956f772ea47884a68f5b714eec7e9b8ca4db8e1b705a681f2d34297cc66e1c6c4b55cae6e2ace957069f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/custom-material/custom-material.module.ts",
            "methods": [],
            "sourceCode": "import { A11yModule } from '@angular/cdk/a11y';\nimport { NgModule } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nconst modules = [A11yModule, MatProgressSpinnerModule];\n\n@NgModule({\n  imports: [...modules],\n  exports: [...modules],\n})\nexport class CustomMaterialModule {\n  constructor(private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer) {\n    // Sidebar Icons\n    this.matIconRegistry.addSvgIcon(\n      'option-one',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/option-one.svg'),\n    );\n    this.matIconRegistry.addSvgIcon(\n      'option-two',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/option-two.svg'),\n    );\n    this.matIconRegistry.addSvgIcon(\n      'option-three',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/option-three.svg'),\n    );\n    this.matIconRegistry.addSvgIcon(\n      'option-five',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/option-five.svg'),\n    );\n    this.matIconRegistry.addSvgIcon(\n      'reports',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/reports.svg'),\n    );\n    //Others\n    this.matIconRegistry.addSvgIcon('logo', this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/images/logo.svg'));\n    this.matIconRegistry.addSvgIcon('empty', this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/images/empty.svg'));\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ReportsModule",
            "id": "module-ReportsModule-39bf52a0040fec29d1fda2f79825c8a0aed090a8b021940be758689bfd555a392dab2251d287fc72efa65125a1b278503162b9828e04ce1796efa8f3f7883fe8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/reports/reports.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ReportsRoutingModule } from './reports-routing.module';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, ReportsRoutingModule],\n})\nexport class ReportsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ReportsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ReportsRoutingModule",
            "id": "module-ReportsRoutingModule-659c2085fffe7180b22711056340335a0e0985578f1b83576dfe8898bb0ece36651bf5349f48a0e847cedca3f27a92e3ee963ee67f310112f124f9cf3c0f671e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/reports/reports-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ReportsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-f442fd98bc0b3c7c99cb5e37a2a5ff752fb86bcb3e3f3fa2682b5d734e11cbffc7b2808a6b57a62aa1a1048c8a0bafd306fa92351d25b1bf186ec6432a71f6e6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ButtonComponent } from '@button';\nimport { CustomMaterialModule } from '@custom-material/custom-material.module';\nimport { DatepickerComponent } from '@datepicker';\nimport { DonutChartComponent } from '@donut-chart';\nimport { DropdownComponent } from '@dropdown';\nimport { EmptyLayoutComponent } from '@empty-layout';\nimport { LoaderComponent } from '@loader';\nimport { ToastComponent } from '@messages';\nimport { PillComponent } from '@pill-btn';\nimport { TableComponent } from '@table';\nimport { NgxEchartsModule } from 'ngx-echarts';\n\nconst modules = [\n  ButtonComponent,\n  DatepickerComponent,\n  DonutChartComponent,\n  DropdownComponent,\n  EmptyLayoutComponent,\n  LoaderComponent,\n  PillComponent,\n  TableComponent,\n  ToastComponent,\n];\n\n@NgModule({\n  declarations: [...modules],\n  imports: [\n    CommonModule,\n    RouterModule,\n    CustomMaterialModule,\n    HttpClientModule,\n    NgxEchartsModule.forRoot({\n      echarts: () => import('echarts'),\n    }),\n  ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CustomMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/custom-material/custom-material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[A11yModule, MatProgressSpinnerModule]"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ButtonComponent,\n  DatepickerComponent,\n  DonutChartComponent,\n  DropdownComponent,\n  EmptyLayoutComponent,\n  LoaderComponent,\n  PillComponent,\n  TableComponent,\n  ToastComponent,\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ButtonSize",
                "childs": [
                    {
                        "name": "Large",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "large"
                    },
                    {
                        "name": "Medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    },
                    {
                        "name": "Small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "ExtraSmall",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "xsmall"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/ui/button/enums/button-size.enum.ts"
            },
            {
                "name": "ButtonTypes",
                "childs": [
                    {
                        "name": "Button",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "IconButton",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/ui/button/enums/button-type.enum.ts"
            },
            {
                "name": "MessageType",
                "childs": [
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "Info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "Alert",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "alert"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/ui/messages/enums/message-type.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/custom-material/custom-material.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/custom-material/custom-material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[A11yModule, MatProgressSpinnerModule]"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ButtonComponent,\n  DatepickerComponent,\n  DonutChartComponent,\n  DropdownComponent,\n  EmptyLayoutComponent,\n  LoaderComponent,\n  PillComponent,\n  TableComponent,\n  ToastComponent,\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/shared/ui/button/enums/button-size.enum.ts": [
                {
                    "name": "ButtonSize",
                    "childs": [
                        {
                            "name": "Large",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "large"
                        },
                        {
                            "name": "Medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        },
                        {
                            "name": "Small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "ExtraSmall",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "xsmall"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/ui/button/enums/button-size.enum.ts"
                }
            ],
            "src/app/shared/ui/button/enums/button-type.enum.ts": [
                {
                    "name": "ButtonTypes",
                    "childs": [
                        {
                            "name": "Button",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "IconButton",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/ui/button/enums/button-type.enum.ts"
                }
            ],
            "src/app/shared/ui/messages/enums/message-type.enum.ts": [
                {
                    "name": "MessageType",
                    "childs": [
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "Info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "alert"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/ui/messages/enums/message-type.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "reports",
                        "loadChildren": "./reports/reports-routing.module#ReportsRoutingModule"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/ensure-module-imported-once.guard.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EnsureModuleImportedOnceGuard",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/global-error-handler/global-error-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalErrorHandlerService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/custom-material/custom-material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/initials/initials.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "InitialsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/button/components/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/button/models/button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/datepicker/components/datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/components/donut-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DonutChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/models/donut-chart-button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DonutChartButton",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/models/donut-chart-data-points.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DonutChartDataPoints",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/models/donut-chart-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DonutChartData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/models/donut-chart.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DonutChart",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/dropdown/components/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/dropdown/models/dropdown-item.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/dropdown/models/dropdown-options.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownOptions",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/empty-layout/components/empty-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmptyLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loader/components/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loader/interceptors/loader.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "LoaderInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loader/mocks/loader-consumer.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoaderConsumer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loader/services/loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/messages/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/messages/models/message-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MessageData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/messages/services/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/pill/components/pill.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PillComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/table/components/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}