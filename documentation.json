{
    "pipes": [
        {
            "name": "InitialsPipe",
            "id": "pipe-InitialsPipe-1cba0a47c1744c2e251abc3c30ed1de4ad44060660ebe2b3f556bf714643f1d6dba460f425f3b8b3f5e6fc6e8ed47e365b0ec54c6a3de187c8865fd449de556d",
            "file": "src/app/shared/pipes/initials/initials.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "initials",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'initials',\n})\nexport class InitialsPipe implements PipeTransform {\n  transform(string: string): string {\n    if (string !== '') {\n      const fullString: string[] = string.split(' ');\n\n      const firstString: string = fullString.shift() || '';\n      let initials: string = firstString?.charAt(0) || '';\n\n      if (fullString.length > 0) {\n        initials += fullString.pop()?.charAt(0) || '';\n      } else {\n        initials += firstString?.charAt(1) || '';\n      }\n\n      return initials.toUpperCase();\n    }\n\n    return '';\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Button",
            "id": "interface-Button-35714c42e26faec84bcd08874388ab25c64fb210ebeb8382c962d55c0403e948f814fcaa2fb943f01de87eda252d1497edeea756edd18941e8ca8e2d03366563",
            "file": "src/app/shared/ui/button/models/button.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Button {\n  textLabel: string;\n  ariaLabel: string;\n  testAttr: string;\n}\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "testAttr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "textLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DateRange",
            "id": "interface-DateRange-ff20585e030b4583739573e834659367eac541341f03c3996557b973be0164f1ce720303fa08a11f2db1afcabb146f250b8408a1f175b590837e17fee83c4911",
            "file": "src/app/shared/ui/datepicker/models/date-range.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DateRange {\n  from: string;\n  to: string;\n}\n",
            "properties": [
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DonutChart",
            "id": "interface-DonutChart-6e190dd69861b0247d12b2b7d8126f6c50e29eb24e9d78f36de916ae3dcde6b415d93a9537a880402f327cd1ada3f565706c63492a193df96201791a9c1c59e6",
            "file": "src/app/shared/ui/donut-chart/models/donut-chart.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DonutChartDataPoints } from './donut-chart-data-points.interface';\n\nexport interface DonutChart {\n  tooltip: {\n    trigger: string;\n    showContent: boolean;\n  };\n  toolbox: {\n    show: boolean;\n  };\n  legend: {\n    show: boolean;\n  };\n  color: string[];\n  series: [\n    {\n      name: string;\n      data: DonutChartDataPoints[];\n      type: string;\n      emphasis: {\n        focus: string;\n      };\n      label: {\n        formatter: string;\n      };\n      radius: string[];\n      animationDelay: (idx: number) => number;\n      lineStyle: {\n        width: number;\n        type: string;\n      };\n    },\n  ];\n  animationEasing: string;\n  animationDelayUpdate: (idx: number) => number;\n}\n",
            "properties": [
                {
                    "name": "animationDelayUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "animationEasing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "legend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[literal type]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "toolbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DonutChartData",
            "id": "interface-DonutChartData-b2ca8909d43ab6183357563eeccbeff10eb9306465a32e0af91c1518711676d9533f9d6611e6fd9c6a0c50cf6de532265d27840044056ee33004df0eb28b3e93",
            "file": "src/app/shared/ui/donut-chart/models/donut-chart-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DonutChartDataPoints } from './donut-chart-data-points.interface';\n\nexport interface DonutChartData {\n  series: DonutChartDataPoints[];\n  color: string[];\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DonutChartDataPoints[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DonutChartDataPoints",
            "id": "interface-DonutChartDataPoints-b1196666111c64fd9e838ab43e1da61f8a86d24ffb8033973dc5202bc919f62e34df1d4eee1421e928bd4709a7f9d923dd732e8248bf36675140f678fe2f1a4f",
            "file": "src/app/shared/ui/donut-chart/models/donut-chart-data-points.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DonutChartDataPoints {\n  value: number;\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DropdownItem",
            "id": "interface-DropdownItem-8ed0429676524d58cc1890025eaf77886efbd92d3baa9d763a8f5d5ba89d628bab20e79c4c0e47b424f5edd43ff40d7af0e9efed6a81c08e1c5b674e3e4edb9a",
            "file": "src/app/shared/ui/dropdown/models/dropdown-item.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DropdownItem {\n  itemText: string;\n  itemId: string;\n}\n",
            "properties": [
                {
                    "name": "itemId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "itemText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DropdownOptions",
            "id": "interface-DropdownOptions-a382eccaa00c0ae99584222a9ad58e00b4bf56142f6d9037a54a503b0c4d605d4a4d1082d36634b8005a9691d28eaf6b76494e742df943eb466469bce1c78c72",
            "file": "src/app/shared/ui/dropdown/models/dropdown-options.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DropdownItem } from '.';\n\nexport interface DropdownOptions {\n  items: DropdownItem[];\n  selectedItemId: string;\n  testAttr: string;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownItem[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "selectedItemId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "testAttr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EmptyMessage",
            "id": "interface-EmptyMessage-4250bd66c17c321309622bf5542c6bd1973aa5d24f8932ac62335c08edb260bb2c3289514ea6c31c245b20a548c755ff41eb8c41e459b1c55c6655358602dc88",
            "file": "src/app/shared/ui/empty-layout/models/empty-message.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmptyMessage {\n  title: string;\n  content: string;\n  img: string;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GatewayItem",
            "id": "interface-GatewayItem-1f8481d7de5b6956e689822247b4583d083373b706fe40d9c629375f1e3beafa0848922d09f3fc27a78c0313fb24603e34d5e8ad133014ec0d15624f9e47ec78",
            "file": "src/app/reports/models/gateway-item.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GatewayItem {\n  gatewayId: string;\n  userIds: string[];\n  name: string;\n  type: string;\n  apiKey: string;\n  secondaryApiKey: string;\n  description: string;\n}\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "gatewayId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "secondaryApiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Gateways",
            "id": "interface-Gateways-554e5a26a336d8fb2228650a37a65e76192077fe16b8463463f925568c12bf18b270d04be168171584ae593773514e53525c0bf8388ee782d9c0516d895e10fa",
            "file": "src/app/reports/models/gateways.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GatewayItem } from './gateway-item.interface';\n\nexport interface Gateways {\n  code: string;\n  data: GatewayItem[];\n  error: null;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GatewayItem[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MessageData",
            "id": "interface-MessageData-1b1ffd77e49672a0d8dea31542bef2546f963c764f6ba57c86aeaab0bbb2a6253be9127ec8a98f03107b6c37282e8aa55e786481db8e63a8128524baea05c17e",
            "file": "src/app/shared/ui/message/models/message-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MessageType } from '..';\n\nexport interface MessageData {\n  title?: string;\n  message: string;\n  type: MessageType;\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MessageType",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ProjectItem",
            "id": "interface-ProjectItem-64aee70ce7234cc1859fec154ce9f298ddcbf44e7090bf80b76d26bbc7acf0e147a01e61dcc1d6ae36c0f4178604f5e53923ad5c4750707a0cff015d66f2c67c",
            "file": "src/app/reports/models/project-item.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ProjectItem {\n  projectId: string;\n  userIds: string[];\n  rule: string;\n  gatewayIds: string[];\n  structure: string;\n  industry: string;\n  website: string;\n  description: string;\n  image: string;\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "gatewayIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "industry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "rule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "structure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "userIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Projects",
            "id": "interface-Projects-ab548b6f67e8d25bfae93c1e7afd0a454db9ccefbbe7d510814a96e585fa079e4ed8b834d7a34dac882d2c8a6eba96036d7fc1028403fe27bdb5cbdabf25a936",
            "file": "src/app/reports/models/projects.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ProjectItem } from './project-item.interface';\n\nexport interface Projects {\n  code: string;\n  data: ProjectItem[];\n  error: null;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectItem[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ReportFilters",
            "id": "interface-ReportFilters-092ec47ad0b0ad3b94a44b51096a158f14b72983bbd3c0ed124f4e785637b21864a84bba63dda81743e4585481aa85c19bf38e880e57d2490fac48d40488beff",
            "file": "src/app/reports/models/report-filters.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ReportFilters {\n  from: string;\n  to: string;\n  projectId: string;\n  gatewayId: string;\n}\n",
            "properties": [
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "gatewayId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ReportGrouped",
            "id": "interface-ReportGrouped-c28770626aca3dd57d1686b4b1910b1b52aa2dad4ce7d494e5f9d85a7cb81dbdef1399f5ae430bc918af949ce9eb69e7ee81a6c8ac0965c423e11a81f33739a6",
            "file": "src/app/reports/models/reports-grouped.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ReportItem } from 'app/reports/models';\nexport interface ReportGrouped {\n  reportName: string;\n  data: ReportItem[];\n  total: number;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReportItem[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "reportName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ReportItem",
            "id": "interface-ReportItem-9abbc22fc65a97b33b45eda379a73c1b25cac1a1a5a613215df8ce3878988ee3fe144efc937844fd39defa925a4d8868365bcc2c3d8c77d80196a8a07b31c6af",
            "file": "src/app/reports/models/report-item.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ReportItem {\n  paymentId: string;\n  amount: number;\n  projectId: string;\n  gatewayId: string;\n  userIds: string[];\n  modified: string;\n  created: string;\n  projectName?: string;\n  gatewayName?: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "gatewayId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "gatewayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "modified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "paymentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "userIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Reports",
            "id": "interface-Reports-dc98cb689e6416a32ae18e1e6a8d1fa94dd12ca5ccadb2f2b16fd7314705af353771fea835db35bb2f63a27a3a0fd4d8351808c47e6b7e9b3c9db11825df43ad",
            "file": "src/app/reports/models/reports.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ReportItem } from './report-item.interface';\nexport interface Reports {\n  code: string;\n  data: ReportItem[];\n  error: null;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReportItem[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserItem",
            "id": "interface-UserItem-e8a2328a58ff318fb5592ecf23b49b6524e8ec2ead2a455c849d3ab57e190987091970965f5434f4b3fb8abad852309640d38a22a2ece11e956688fa84622b37",
            "file": "src/app/core/models/user-item.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserItem {\n  userId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Users",
            "id": "interface-Users-81544f1fd05d77a36618078d4301bd1666952db88cc54c869d72a987a114b27754b01a07db6c9b536fca90fd63c95312b9b6002dd4c3a9ec234d77ece38360e9",
            "file": "src/app/core/models/users.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UserItem } from './user-item.interface';\n\nexport interface Users {\n  code: number;\n  data: UserItem[];\n  error: number;\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserItem[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-1a37e3f769e2fe585c0651fd66b56c52f617539f67f2d036e319941d8bf5bebafcc8e7cfac85ed5d680665bc731667e667cba04f49e04341bd0d96e2555551f0",
            "file": "src/app/core/services/auth/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserItem[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { UserItem } from './../../models/user-item.interface';\nimport { Users } from './../../models/users.interface';\nimport { GlobalErrorHandlerService } from './../global-error-handler/global-error-handler.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private httpClient: HttpClient, private globalErrorHandlerService: GlobalErrorHandlerService) {}\n\n  public getCurrentUser(): Observable<UserItem[]> {\n    return this.httpClient.get<Users>('users').pipe(\n      map((res: Users) => res.data),\n      catchError((err) => this.globalErrorHandlerService.handleError(err)),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalErrorHandlerService",
                        "type": "GlobalErrorHandlerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalErrorHandlerService",
                        "type": "GlobalErrorHandlerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GlobalErrorHandlerService",
            "id": "injectable-GlobalErrorHandlerService-f0cc88264894a04d57d9353097caba36eea830bb10606bc6a3db9e422e15ee9ad8cffbbfa7bf522a7998f2a2c66b7038c780ef7f708321bf8db7167cdb83bb7b",
            "file": "src/app/core/services/global-error-handler/global-error-handler.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getServerErrorMessage",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "err",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable, isDevMode } from '@angular/core';\nimport { MessageType, ToastService } from '@message';\nimport { Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GlobalErrorHandlerService implements ErrorHandler {\n  constructor(private httpClient: HttpClient, private toastService: ToastService) {}\n\n  // TODO: Create a service/method to send the error message to Logs in production env\n  public handleError(err: HttpErrorResponse): Observable<never> {\n    if (isDevMode()) {\n      console.error(err);\n    }\n\n    const message = this.getServerErrorMessage(err);\n\n    this.toastService.openSnackBar({\n      title: message,\n      message: '',\n      type: MessageType.Error,\n    });\n\n    return throwError(() => message);\n  }\n\n  private getServerErrorMessage(error: HttpErrorResponse): string {\n    switch (error.status) {\n      case 404: {\n        return `Not Found: ${error.message}`;\n      }\n      case 403: {\n        return `Access Denied: ${error.message}`;\n      }\n      case 500: {\n        return `Internal Server Error: ${error.message}`;\n      }\n      default: {\n        return `Unknown Server Error: ${error.message}`;\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoaderService",
            "id": "injectable-LoaderService-a43338cab9558d3a68f80a98d5dabdf962f33cc4096ba52127663ff29c15c0283543d4c6a34ca3c00e90083d8ae19a9ab39bc2ef7e41b6174002e18c858429a6",
            "file": "src/app/shared/ui/loader/services/loader.service.ts",
            "properties": [
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoaderService {\n  public isLoading: BehaviorSubject<boolean>;\n\n  constructor() {\n    this.isLoading = new BehaviorSubject<boolean>(false);\n  }\n\n  public show(): void {\n    this.isLoading.next(true);\n  }\n\n  public hide(): void {\n    this.isLoading.next(false);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ReportsService",
            "id": "injectable-ReportsService-85fb689681ee1ffd4242a0037eb8495ee96cfd6eae4c1fbbe48c23c59daad8e0b91f099edd55b27631af2d9d315d04cb4835fa9af65bbb6533aafe5acbf2918a",
            "file": "src/app/reports/services/reports.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getGateways",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<GatewayItem[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ProjectItem[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getReports",
                    "args": [
                        {
                            "name": "filters",
                            "type": "ReportFilters",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ReportItem[]>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "ReportFilters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { GlobalErrorHandlerService } from '@core/services/global-error-handler/global-error-handler.service';\nimport { map, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { GatewayItem, Gateways, ProjectItem, Projects, ReportFilters, ReportItem, Reports } from '../models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReportsService {\n  constructor(private httpClient: HttpClient, private errorService: GlobalErrorHandlerService) {}\n\n  public getProjects(): Observable<ProjectItem[]> {\n    return this.httpClient.get<Projects>('projects').pipe(\n      map((res: Projects) => res.data),\n      catchError((err) => this.errorService.handleError(err)),\n    );\n  }\n\n  public getGateways(): Observable<GatewayItem[]> {\n    return this.httpClient.get<Gateways>('gateways').pipe(\n      map((res: Gateways) => res.data),\n      catchError((err) => this.errorService.handleError(err)),\n    );\n  }\n\n  public getReports(filters: ReportFilters): Observable<ReportItem[]> {\n    return this.httpClient.post<Reports>('report', filters).pipe(\n      map((res: Reports) => res.data),\n      catchError((err: HttpErrorResponse) => this.errorService.handleError(err)),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorService",
                        "type": "GlobalErrorHandlerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorService",
                        "type": "GlobalErrorHandlerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-88d8f9647f55795b950b0e965033f581f7a9194ad1482f10825fd39efccfe04585045141a86df34ed05da9ab3e18df7fa0aaafd479ee52cc6257d1ab90b0f574",
            "file": "src/app/shared/ui/message/services/toast.service.ts",
            "properties": [
                {
                    "name": "snackBarConfig",
                    "defaultValue": "{\n    duration: 3000,\n    verticalPosition: 'top',\n    horizontalPosition: 'right',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarConfig",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dismissSnackBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "data",
                            "type": "MessageData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MessageData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { MessageData, MessageType } from '..';\nimport { ToastComponent } from '../components';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastService {\n  private snackBarConfig: MatSnackBarConfig = {\n    duration: 3000,\n    verticalPosition: 'top',\n    horizontalPosition: 'right',\n  };\n\n  constructor(private snackBar: MatSnackBar) {}\n\n  public openSnackBar(data: MessageData): void {\n    const _type: MessageType = data.type !== undefined ? data.type : MessageType.Info;\n\n    this.snackBar.openFromComponent(ToastComponent, {\n      ...this.snackBarConfig,\n      data: { title: data.title, message: data.message, type: _type },\n    });\n  }\n\n  public dismissSnackBar(): void {\n    this.snackBar.dismiss();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-24d455ebf14739fd58ab05bf83677e37b473652e704bced10fb46ce3ddae159271822669e5fbca88ad47bb65eacf94c23642c978a75a6de8bfc6adcc5119060f",
            "file": "src/app/core/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<Object>>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from './../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthInterceptor implements HttpInterceptor {\n  public intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<Object>> {\n    if (req.url.includes('/assets')) {\n      const baseUrl = document.baseURI;\n      const asset = req.url.split('/assets/');\n\n      req = req.clone({\n        url: `${baseUrl}assets/${asset[1]}`,\n      });\n    } else {\n      req = req.clone({\n        url: `${environment.api}/${req.url}`,\n      });\n    }\n\n    return next.handle(req);\n  }\n}\n",
            "type": "interceptor"
        },
        {
            "name": "LoaderInterceptor",
            "id": "injectable-LoaderInterceptor-4c5965c937faaa2f50025ed1ec97962e2ff4caa42d1f95b74c846143904de2f6df69606f106090990bf7e679f494f7bed07fbe8afa9188434f204c6b13452439",
            "file": "src/app/shared/ui/loader/interceptors/loader.interceptor.ts",
            "properties": [
                {
                    "name": "requestsCompleted",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "totalRequests",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { finalize, Observable } from 'rxjs';\nimport { LoaderService } from '../services/loader.service';\n\n@Injectable()\nexport class LoaderInterceptor implements HttpInterceptor {\n  public totalRequests = 0;\n  public requestsCompleted = 0;\n\n  constructor(private loaderService: LoaderService) {}\n\n  public intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (!req.url.includes('/assets')) {\n      this.loaderService.show();\n      this.totalRequests++;\n    }\n\n    return next.handle(req).pipe(\n      finalize(() => {\n        if (!req.url.includes('/assets')) {\n          this.requestsCompleted++;\n          if (this.requestsCompleted === this.totalRequests) {\n            this.totalRequests = 0;\n            this.requestsCompleted = 0;\n            this.loaderService.hide();\n          }\n        }\n      }),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "EnsureModuleImportedOnceGuard",
            "id": "class-EnsureModuleImportedOnceGuard-987d24bf497d0c6cbafaf739b4ab1e7cf52fcb69a303fbcdf34b15414e899bb53b63088841284375bfc60a869b7b10f5a96e091603e2cda95c4bfa944563a3df",
            "file": "src/app/core/guards/ensure-module-imported-once.guard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class EnsureModuleImportedOnceGuard {\n  protected constructor(targetModule: unknown, moduleName: string) {\n    if (targetModule) {\n      throw new Error(`${moduleName} has already been loaded. Import this module in the AppModule only.`);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "targetModule",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "moduleName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "targetModule",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "moduleName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "description": "<p>This abstract class used for module building by extending this class\nprevents importing the module into somewhere else than root App Module.</p>\n",
            "rawdescription": "\n\nThis abstract class used for module building by extending this class\nprevents importing the module into somewhere else than root App Module.\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoaderConsumer",
            "id": "class-LoaderConsumer-f178281fbb4318e331e2ccd0281690b234be7d358acdadd5cf700fd7424b3377ea41eefb5ca2d765e05dfbfc06600a1ad83720036cdadf19055c899da2cc9f12",
            "file": "src/app/shared/ui/loader/mocks/loader-consumer.mock.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LoaderService } from '../services/loader.service';\n\nexport class LoaderConsumer {\n  isBusy = false;\n\n  constructor(private loaderService: LoaderService) {\n    this.loaderService.isLoading.subscribe((value: boolean) => {\n      this.isBusy = value;\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isBusy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-651a4467f3e053c72f3bc00ab9d7aababa7967d7d640847c7e79ff1cac7d357c9f0c0bf582b322aded669f9c24aed2fcd0dc813b143cd45935ce1f9051a64c3a",
            "file": "src/app/shared/ui/accordion/components/accordion.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "testAttr",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'app-accordion',\n  templateUrl: './accordion.component.html',\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AccordionComponent {\n  @Input() testAttr: string = '';\n  @Input() expanded: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".accordion {\n  margin-bottom: 5px;\n  display: block;\n\n  .accordion-header-content {\n    background: #ffffff;\n    border-radius: 10px;\n    height: 19px;\n    display: flex;\n    justify-content: space-between;\n    cursor: pointer;\n    padding: 26px 21px;\n\n    p {\n      font-weight: 700;\n      font-size: 16px;\n      line-height: 19px;\n      color: #011f4b;\n    }\n  }\n\n  .accordion-body-content {\n    padding: 14px 0;\n  }\n}\n",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<cdk-accordion class=\"accordion\" [attr.data-testid]=\"'accordion-' + testAttr\">\n  <cdk-accordion-item\n    #accordionItem=\"cdkAccordionItem\"\n    class=\"accordion-item\"\n    role=\"button\"\n    tabindex=\"0\"\n    [expanded]=\"expanded\"\n    [attr.data-testid]=\"'accordion-header-' + testAttr\"\n    [attr.aria-expanded]=\"accordionItem.expanded\"\n    [attr.aria-controls]=\"'accordion-body-' + testAttr\"\n  >\n    <div class=\"accordion-item-header\" (click)=\"accordionItem.toggle()\">\n      <ng-content select=\".accordion-header-content\"></ng-content>\n    </div>\n\n    <div\n      class=\"accordion-item-body\"\n      role=\"region\"\n      [style.display]=\"accordionItem.expanded ? '' : 'none'\"\n      [attr.data-testid]=\"'accordion-body-' + testAttr\"\n      [attr.aria-labelledby]=\"'accordion-header-' + testAttr\"\n    >\n      <ng-content select=\".accordion-body-content\"></ng-content>\n    </div>\n  </cdk-accordion-item>\n</cdk-accordion>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ce75594999580f2d9fddf481c0674f0bdcc9097f375006e8498005c290dbf6fb88956d8eed21a89c57bce4b4426a5f8a9fcb092d85829813cf39ae22dc4e1236",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<router-outlet></router-outlet>`,\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-5dfb8059b62d894da05070abe3b12832128309a7493eddf511b5626ff043882e66cdefa7521e5fedf0868c56644b21a9ac3b081c7be022f9930365316899ebd5",
            "file": "src/app/shared/ui/button/components/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "btn",
                    "defaultValue": "{\n    textLabel: 'Default',\n    ariaLabel: '',\n    testAttr: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Button",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Button } from '../models/button.interface';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  @Input() btn: Button = {\n    textLabel: 'Default',\n    ariaLabel: '',\n    testAttr: '',\n  };\n\n  @Output() btnClicked: EventEmitter<void> = new EventEmitter();\n\n  public clickBtn(): void {\n    this.btnClicked.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button {\n  display: flex;\n  justify-content: center !important;\n  align-items: center !important;\n  background: #005b96;\n  border-radius: 5px;\n  width: 118px;\n  height: 32px;\n  color: white;\n  cursor: pointer;\n  border: transparent;\n\n  span {\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 16px;\n    cursor: pointer;\n  }\n\n  &:hover {\n    border: 1px solid #005b96;\n    color: #005b96;\n    background-color: white;\n  }\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"button\" (click)=\"clickBtn()\" [attr.aria-label]=\"btn.ariaLabel\" [attr.data-testid]=\"btn.testAttr\">\n  <span>{{btn.textLabel}}</span>\n</button>\n"
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-e9e1181757655210e2ab33eb7fb755d2d9f9ed1e4e2cce479d3961f303db2c0459b4bac11b33d298f3fd2e09a34f6e0180ae346570e5cf6a7a1b9cbd1a7463d1",
            "file": "src/app/shared/ui/datepicker/components/datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-datepicker",
            "styleUrls": [
                "./datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "dateValueChange",
                    "defaultValue": "new EventEmitter<DateRange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<DateRange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "maxDate",
                    "defaultValue": "new Date('2021-12-31')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date('2021-01-01')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "range",
                    "defaultValue": "new FormGroup({\n    start: new FormControl(),\n    end: new FormControl(),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { DateRange } from './../models/date-range.interface';\n\n@Component({\n  selector: 'app-datepicker',\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.scss'],\n})\nexport class DatepickerComponent implements OnInit {\n  public minDate: Date = new Date('2021-01-01');\n  public maxDate: Date = new Date('2021-12-31');\n  public range = new FormGroup({\n    start: new FormControl(),\n    end: new FormControl(),\n  });\n\n  @Output() dateValueChange: EventEmitter<DateRange> = new EventEmitter<DateRange>();\n\n  public ngOnInit(): void {\n    this.range.valueChanges.subscribe((res) => {\n      if (res.start && res.end) {\n        this.dateValueChange.emit({ from: res.start.toISOString().slice(0, 10), to: res.end.toISOString().slice(0, 10) });\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".datepicker {\n  margin-right: 22px;\n}\n",
                    "styleUrl": "./datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"fill\" class=\"datepicker\">\n  <mat-label>Enter a date range</mat-label>\n  <mat-date-range-input [formGroup]=\"range\" [rangePicker]=\"picker\" [min]=\"minDate\" [max]=\"maxDate\">\n    <input matStartDate formControlName=\"start\" placeholder=\"Start date\" />\n    <input matEndDate formControlName=\"end\" placeholder=\"End date\" />\n  </mat-date-range-input>\n  <mat-hint>MM/DD/YYYY – MM/DD/YYYY</mat-hint>\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  <mat-date-range-picker #picker></mat-date-range-picker>\n</mat-form-field>\n"
        },
        {
            "name": "DonutChartComponent",
            "id": "component-DonutChartComponent-5024aa3b33c07467c205551ec3e3a09f4026678781ad8f64533ea1a685ff24affa956536d13fcc437ad88e592f054329fa46fd91d5d32a75e5301d3e4a5e0636",
            "file": "src/app/shared/ui/donut-chart/components/donut-chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-donut-chart",
            "styleUrls": [
                "./donut-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./donut-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "amount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "chartData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "DonutChartData | undefined",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EChartsOption",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "drawChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { EChartsOption } from 'echarts';\nimport { DonutChartData } from '../models';\n\n@Component({\n  selector: 'app-donut-chart',\n  templateUrl: './donut-chart.component.html',\n  styleUrls: ['./donut-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DonutChartComponent implements OnChanges {\n  @Input() chartData: DonutChartData | undefined;\n  @Input() title: string = '';\n  @Input() amount: number = 0;\n\n  public chartOption!: EChartsOption;\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes['chartData'] && changes['chartData'].currentValue) {\n      this.drawChart();\n    }\n  }\n\n  private drawChart(): void {\n    this.chartOption = {\n      tooltip: {\n        trigger: 'axis',\n        showContent: true,\n      },\n      toolbox: {\n        show: false,\n      },\n      legend: {\n        show: false,\n      },\n      color: this.chartData?.color,\n      series: [\n        {\n          name: this.title,\n          data: this.chartData?.series,\n          type: 'pie',\n          emphasis: {\n            focus: 'self',\n          },\n          label: {\n            formatter: '{b}: ({d}%)',\n          },\n          radius: ['40%', '70%'],\n          animationDelay: (idx) => idx * 10,\n          lineStyle: {\n            width: 3,\n            type: 'solid',\n          },\n        },\n      ],\n      animationEasing: 'elasticOut',\n      animationDelayUpdate: (idx) => idx * 10,\n    } as EChartsOption;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".donut-chart-wrapper {\n  height: 450px;\n  background-color: white;\n  width: 100%;\n\n  .chart-title {\n    height: 15px;\n    background: #f1fafe;\n    border-radius: 10px;\n    display: flex;\n    padding: 19px 23px;\n\n    p {\n      margin-right: 35px;\n\n      .color-swatch {\n        width: 15px;\n        height: 15px;\n        border-radius: 5px;\n        display: inline-block;\n        margin-right: 12px;\n      }\n\n      .chart-name {\n        font-weight: 400;\n        display: inline-block;\n        vertical-align: top;\n        font-size: 14px;\n        line-height: 16px;\n        color: #011f4b;\n      }\n    }\n  }\n\n  .total-amount-graphic {\n    height: 53px;\n    background: #f1fafe;\n    border-radius: 10px;\n\n    p {\n      font-weight: 700;\n      font-size: 16px;\n      line-height: 19px;\n      color: #011f4b;\n      padding: 17px 20px;\n      text-transform: uppercase;\n    }\n  }\n}\n",
                    "styleUrl": "./donut-chart.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"donut-chart-wrapper\" data-testid=\"donut-chart-wrapper\">\n  <div class=\"donut-chart-body\" *ngIf=\"!!chartData\">\n    <div class=\"chart-title\">\n      <ng-container *ngFor=\"let item of chartData.series; let i = index\">\n        <p>\n          <span class=\"color-swatch\" [style.background-color]=\"chartData.color[i]\"></span>\n          <span class=\"chart-name\">{{item.name}}</span>\n        </p>\n      </ng-container>\n    </div>\n    <div class=\"donut-chart\">\n      <div echarts [options]=\"chartOption\" [autoResize]=\"true\"></div>\n    </div>\n    <div class=\"total-amount-graphic\">\n      <p>{{title}} | {{amount | currency:'':'code'}}</p>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-75cbdd095cddc9b5add115b4830ed9002b319e6497e7a4de6ef1dfa5b1380d378a69128aea62a92754364747cd1191f6f5660b346f6c6756fbf82dc969b3d65b",
            "file": "src/app/shared/ui/dropdown/components/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "defaultValue": "{\n    items: [],\n    selectedItemId: '0',\n    testAttr: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "DropdownOptions",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemSelected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "DropdownItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "DropdownItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DropdownItem, DropdownOptions } from '../models';\n\n@Component({\n  selector: 'app-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.scss'],\n})\nexport class DropdownComponent {\n  @Input() options: DropdownOptions = {\n    items: [],\n    selectedItemId: '0',\n    testAttr: '',\n  };\n  @Output() itemSelected: EventEmitter<string> = new EventEmitter();\n\n  public handleSelected(item: DropdownItem): void {\n    this.options.selectedItemId = item.itemId;\n    this.itemSelected.emit(item.itemId);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"dropdown\">\n  <mat-form-field class=\"dropdown\" appearance=\"fill\" [attr.data-testid]=\"options.testAttr\" floatLabel=\"never\">\n    <mat-select #mySelect panelClass=\"select-panel\" multiple=\"false\" [(value)]=\"options.selectedItemId\" disableOptionCentering>\n      <mat-option\n        *ngFor=\"let item of options.items; let i = index\"\n        (click)=\"handleSelected(item)\"\n        (keyup.enter)=\"handleSelected(item)\"\n        [value]=\"item['itemId']\"\n        attr.data-testid=\"option-{{i}}\"\n        #matOption\n      >\n        {{item['itemText']}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n"
        },
        {
            "name": "EmptyLayoutComponent",
            "id": "component-EmptyLayoutComponent-0dfd482d5ebadec0b3f080cdec09a7a2c0acb6608b5e38a3558c6bc6f7b6b40df354f75540484dfe30500cad9b262bd8dc5750590b1c3562db0ed2e29a489f44",
            "file": "src/app/shared/ui/empty-layout/components/empty-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-empty-layout",
            "styleUrls": [
                "./empty-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "{\n    title: '',\n    content: '',\n    img: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EmptyMessage",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { EmptyMessage } from '../models/empty-message.interface';\n\n@Component({\n  selector: 'app-empty-layout',\n  templateUrl: './empty-layout.component.html',\n  styleUrls: ['./empty-layout.component.scss'],\n})\nexport class EmptyLayoutComponent {\n  @Input() message: EmptyMessage = {\n    title: '',\n    content: '',\n    img: '',\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".empty-page {\n  width: 450px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: calc(100% - 175px);\n  flex-direction: column;\n\n  h3 {\n    font-weight: 700;\n    font-size: 24px;\n    line-height: 28px;\n    color: #011f4b;\n    text-align: center;\n  }\n\n  p {\n    font-weight: 700;\n    font-size: 16px;\n    line-height: 19px;\n    color: #7e8299;\n    margin-bottom: 51px;\n    text-align: center;\n  }\n}\n",
                    "styleUrl": "./empty-layout.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"empty-page\" data-testid=\"empty-page\">\n  <h3>{{message.title}}</h3>\n  <p>{{message.content}}</p>\n  <img [src]=\"'/assets/images/'+ message.img  + '.svg'\" alt=\"Empty Page\" />\n</div>\n"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-eee707f2186279dc02f461d47cd474a8eac0b409b35c8b330f51c6a7a1a2cb1a16e45d21a2557c2bf806dd51fae3155ab941252a3a5755b46c3c08b5756fc06b",
            "file": "src/app/core/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "username",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { UserItem } from '@core/models/user-item.interface';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { AuthService } from './../services/auth/auth.service';\n\n@UntilDestroy({ checkProperties: true })\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss'],\n})\nexport class LayoutComponent implements OnInit {\n  public username: string = '';\n\n  constructor(private authService: AuthService) {}\n\n  public ngOnInit(): void {\n    this.getCurrentUser();\n  }\n\n  private getCurrentUser(): void {\n    this.authService.getCurrentUser().subscribe((res: UserItem[]) => {\n      if (res.length > 0) {\n        this.username = `${res[0].firstName} ${res[0].lastName}`;\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navbar {\n  height: 80px;\n  border-bottom: 2px solid #f3f6f9;\n  background-color: white;\n  padding: 21px 100px 16px 35px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  #application-menu {\n    display: flex;\n    align-items: center;\n\n    .logo {\n      width: 27px;\n      height: 40px;\n      margin: 0 38px 0 0;\n    }\n\n    .menu-icon {\n      cursor: pointer;\n      background: transparent;\n      border: transparent;\n      width: 31px;\n      height: 27px;\n    }\n  }\n\n  #user-menu {\n    display: flex;\n    align-items: flex-end;\n\n    #user-initials {\n      width: 32px;\n      height: 32px;\n      background: #f6ca65;\n      border-radius: 5px;\n      margin-right: 11px;\n      padding: 8px;\n\n      span {\n        font-weight: 700;\n        font-size: 23px;\n        line-height: 27px;\n        text-align: center;\n        color: white;\n      }\n    }\n\n    #user-name {\n      font-weight: 700;\n      font-size: 16px;\n      line-height: 19px;\n      color: #005b96;\n    }\n  }\n}\n\n.sidenav-container {\n  height: calc(100vh - 80px);\n\n  mat-sidenav {\n    width: 90px;\n    border-right: transparent;\n\n    mat-nav-list {\n      padding: 41px 12px 0;\n\n      a {\n        width: 24px;\n        height: 24px;\n        margin-bottom: 24px;\n        &:hover {\n          background: transparent;\n          mat-icon {\n            fill: #2daee5;\n          }\n        }\n        button {\n          cursor: pointer;\n          background: transparent;\n          border: transparent;\n        }\n      }\n    }\n  }\n\n  .content {\n    background-color: white;\n    padding: 35px 100px 0 16px;\n    height: calc(100vh - 115px);\n    footer {\n      padding: 27px 0 22px 0;\n      a,\n      span {\n        font-weight: 700;\n        font-size: 16px;\n        line-height: 19px;\n        color: #005b96;\n        text-decoration: none;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Navbar -->\n<mat-toolbar class=\"navbar\">\n  <div id=\"application-menu\">\n    <mat-icon svgIcon=\"logo\" class=\"logo\"></mat-icon>\n    <button mat-icon-button aria-label=\"Menu Icon\" class=\"menu-icon\">\n      <mat-icon svgIcon=\"menu-xpto\"></mat-icon>\n    </button>\n  </div>\n  <div id=\"user-menu\">\n    <div id=\"user-initials\">\n      <span>{{ username | initials }}</span>\n    </div>\n    <p id=\"user-name\">{{username}}</p>\n  </div>\n</mat-toolbar>\n\n<mat-sidenav-container class=\"sidenav-container\">\n  <!-- Sidenav -->\n  <mat-sidenav opened=\"true\" mode=\"side\">\n    <mat-nav-list>\n      <a mat-list-item disableRipple>\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"option-one\"></mat-icon>\n        </button>\n      </a>\n      <a mat-list-item disableRipple>\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"option-two\"></mat-icon>\n        </button>\n      </a>\n      <a mat-list-item disableRipple>\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"option-three\"></mat-icon>\n        </button>\n      </a>\n      <a mat-list-item [routerLink]=\"['/reports']\" routerLinkActive=\"active\" disableRipple>\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"reports\"></mat-icon>\n        </button>\n      </a>\n      <a mat-list-item disableRipple>\n        <button mat-icon-button>\n          <mat-icon svgIcon=\"option-five\"></mat-icon>\n        </button>\n      </a>\n    </mat-nav-list>\n  </mat-sidenav>\n\n  <!-- Main Content -->\n  <mat-sidenav-content class=\"content\">\n    <router-outlet></router-outlet>\n    <app-loader></app-loader>\n    <footer>\n      <a href=\"\" aria-label=\"Terms&Conditions\">Terms&Conditions</a>\n      <span> | </span>\n      <a href=\"\" aria-label=\"Privacy policy\">Privacy policy</a>\n    </footer>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-4df3600564486609fe2a88303ae8b937029f4ae36d892b59dfd0949478e02f3bea173ba0cca74d31eb3b2b9e7c0bae017dc2c8232fac44b173adfa55fcf04a0f",
            "file": "src/app/shared/ui/loader/components/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loadingMessage",
                    "defaultValue": "'Loading...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "this.loaderService.isLoading.asObservable().pipe(map((isLoading: boolean) => !isLoading))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { map, Observable } from 'rxjs';\nimport { LoaderService } from '../services/loader.service';\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.scss'],\n})\nexport class LoaderComponent {\n  @Input() loadingMessage: string = 'Loading...';\n\n  constructor(private loaderService: LoaderService) {}\n\n  public loading: Observable<boolean> = this.loaderService.isLoading.asObservable().pipe(map((isLoading: boolean) => !isLoading));\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".progress-loader {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 3;\n\n  mat-spinner {\n    margin-bottom: 25px;\n  }\n\n  p {\n    text-align: center;\n  }\n}\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"progress-loader\" [hidden]=\"loading | async\">\n  <mat-spinner></mat-spinner>\n  <p>{{ loadingMessage }}</p>\n</div>\n"
        },
        {
            "name": "ReportsLayoutComponent",
            "id": "component-ReportsLayoutComponent-dc2f9a20d3bfb82183540b69c297b8963f2437cbe75bd89dfba0176d97b446c5729a21fbcf0d65089c9c25ed8733d2bb0620a8e9b431da5c828a53ddd8ad32a1",
            "file": "src/app/reports/components/reports-layout/reports-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reports-layout",
            "styleUrls": [
                "./reports-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reports-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DonutChartData",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "emptyUI",
                    "defaultValue": "{\n    title: 'No reports',\n    content:\n      'Currently you have no data for the reports to be generated. Once you start generating traffic through the Balance application the reports will be shown.',\n    img: 'empty',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EmptyMessage",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gatewayDropdown",
                    "defaultValue": "{\n    items: [\n      {\n        itemText: 'All gateways',\n        itemId: '0',\n      },\n    ],\n    selectedItemId: '0',\n    testAttr: 'gateway-dropdown',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownOptions",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gateways",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GatewayItem[]",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "generateReport",
                    "defaultValue": "{\n    textLabel: 'Generate report',\n    ariaLabel: 'Click to generate report',\n    testAttr: 'generate-report-btn',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projectDropdown",
                    "defaultValue": "{\n    items: [\n      {\n        itemText: 'All projects',\n        itemId: '0',\n      },\n    ],\n    selectedItemId: '0',\n    testAttr: 'project-dropdown',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DropdownOptions",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectItem[]",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "reportFilters",
                    "defaultValue": "{ from: '2021-01-01', to: '2021-12-31', projectId: '', gatewayId: '' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReportFilters",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "reports",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReportGrouped[]",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedGatewayName",
                    "defaultValue": "'All gateways'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedProjectName",
                    "defaultValue": "'All projects'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showAccordionHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showChart",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showGateway",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "totalAmount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "totalTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getReports",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getReportsTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "prepareChartData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "prepareGatewayFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "prepareProjectFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "prepareTableDataPerGateway",
                    "args": [
                        {
                            "name": "result",
                            "type": "ReportItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "ReportItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareTableDataPerProject",
                    "args": [
                        {
                            "name": "result",
                            "type": "ReportItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "ReportItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareTableHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateDateRange",
                    "args": [
                        {
                            "name": "range",
                            "type": "DateRange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "range",
                            "type": "DateRange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGatewayId",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProjectId",
                    "args": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Button } from '@button';\nimport { DateRange } from '@datepicker';\nimport { DonutChartData } from '@donut-chart';\nimport { DropdownOptions } from '@dropdown';\nimport { EmptyMessage } from '@empty-layout';\nimport { GatewayItem, ProjectItem, ReportFilters, ReportGrouped, ReportItem } from 'app/reports/models';\nimport { zip } from 'rxjs';\nimport { ReportsService } from './../../services/reports.service';\n\n@Component({\n  selector: 'app-reports-layout',\n  templateUrl: './reports-layout.component.html',\n  styleUrls: ['./reports-layout.component.scss'],\n})\nexport class ReportsLayoutComponent implements OnInit {\n  public emptyUI: EmptyMessage = {\n    title: 'No reports',\n    content:\n      'Currently you have no data for the reports to be generated. Once you start generating traffic through the Balance application the reports will be shown.',\n    img: 'empty',\n  };\n  public generateReport: Button = {\n    textLabel: 'Generate report',\n    ariaLabel: 'Click to generate report',\n    testAttr: 'generate-report-btn',\n  };\n  public projectDropdown: DropdownOptions = {\n    items: [\n      {\n        itemText: 'All projects',\n        itemId: '0',\n      },\n    ],\n    selectedItemId: '0',\n    testAttr: 'project-dropdown',\n  };\n  public gatewayDropdown: DropdownOptions = {\n    items: [\n      {\n        itemText: 'All gateways',\n        itemId: '0',\n      },\n    ],\n    selectedItemId: '0',\n    testAttr: 'gateway-dropdown',\n  };\n  public reports: ReportGrouped[] = [];\n  public totalAmount: number = 0;\n  public selectedProjectName: string = 'All projects';\n  public selectedGatewayName: string = 'All gateways';\n  public showGateway: boolean = false;\n  public columns: string[] = [];\n  public showAccordionHeader: boolean = true;\n\n  public chart!: DonutChartData;\n  public totalTitle: string = '';\n  public showChart: boolean = false;\n\n  public loading: boolean = true;\n\n  private projects: ProjectItem[] = [];\n  private gateways: GatewayItem[] = [];\n  private reportFilters: ReportFilters = { from: '2021-01-01', to: '2021-12-31', projectId: '', gatewayId: '' };\n\n  constructor(private reportsService: ReportsService) {}\n\n  public ngOnInit(): void {\n    this.getFilters();\n    this.getReports();\n  }\n\n  public getReports(): void {\n    this.loading = true;\n    this.reportsService.getReports(this.reportFilters).subscribe({\n      next: (res: ReportItem[]) => {\n        this.getReportsTitle();\n        this.prepareTableHeader();\n        this.showAccordionHeader = this.reportFilters.projectId !== '' && this.reportFilters.gatewayId !== '';\n        this.totalAmount = res.reduce((a: number, b: ReportItem) => a + b.amount, 0);\n        this.showChart = false;\n\n        if (this.reportFilters.projectId !== '' && this.reportFilters.gatewayId === '') {\n          this.prepareTableDataPerGateway(res);\n        } else {\n          this.prepareTableDataPerProject(res);\n\n          if (this.reportFilters.projectId === '' && this.reportFilters.gatewayId !== '') {\n            this.prepareChartData();\n            this.totalTitle = 'gateway total';\n          }\n        }\n        this.loading = false;\n      },\n      error: () => {\n        this.loading = false;\n      },\n      complete: () => {\n        this.loading = false;\n      },\n    });\n  }\n\n  public updateProjectId(itemId: string): void {\n    this.reportFilters = { ...this.reportFilters, projectId: itemId === '0' ? '' : itemId };\n  }\n\n  public updateGatewayId(itemId: string): void {\n    this.reportFilters = { ...this.reportFilters, gatewayId: itemId === '0' ? '' : itemId };\n  }\n\n  public updateDateRange(range: DateRange): void {\n    this.reportFilters = { ...this.reportFilters, from: range.from, to: range.to };\n  }\n\n  private getFilters(): void {\n    zip(this.reportsService.getProjects(), this.reportsService.getGateways()).subscribe({\n      next: (res: [ProjectItem[], GatewayItem[]]) => {\n        this.projects = res[0];\n        this.gateways = res[1];\n\n        this.prepareProjectFilter();\n        this.prepareGatewayFilter();\n      },\n      error: () => {\n        this.loading = false;\n      },\n    });\n  }\n\n  private prepareProjectFilter(): void {\n    this.projects.forEach((i: ProjectItem) =>\n      this.projectDropdown.items.push({\n        itemId: i.projectId.toString(),\n        itemText: i.name,\n      }),\n    );\n  }\n\n  private prepareGatewayFilter(): void {\n    this.gateways.forEach((i: GatewayItem) =>\n      this.gatewayDropdown.items.push({\n        itemId: i.gatewayId.toString(),\n        itemText: i.name,\n      }),\n    );\n  }\n\n  private getReportsTitle(): void {\n    this.selectedProjectName =\n      this.reportFilters.projectId === ''\n        ? 'All programs'\n        : this.projects.find((i) => i.projectId === this.reportFilters.projectId)?.name ?? '';\n    this.selectedGatewayName =\n      this.reportFilters.gatewayId === ''\n        ? 'All gateways'\n        : this.gateways.find((i) => i.gatewayId === this.reportFilters.gatewayId)?.name ?? '';\n  }\n\n  private prepareTableHeader(): void {\n    if (this.reportFilters.projectId === '' && this.reportFilters.gatewayId === '') {\n      this.columns = ['date', 'gatewayName', 'paymentId', 'amount'];\n      this.showGateway = true;\n    } else {\n      this.columns = ['date', 'paymentId', 'amount'];\n      this.showGateway = false;\n    }\n  }\n\n  private prepareTableDataPerProject(result: ReportItem[]): void {\n    let reduced: ReportItem[][] = result.reduce((r, acc) => {\n      r[acc.projectId] = r[acc.projectId] || [];\n      r[acc.projectId].push({\n        ...acc,\n        gatewayName: this.gateways.find((i) => i.gatewayId === acc.gatewayId)?.name,\n      });\n\n      return r;\n    }, Object.create(null));\n\n    this.reports = Object.values(reduced)\n      .map((reports: ReportItem[]) => {\n        return {\n          reportName: this.projects.find((i) => i.projectId === reports[0].projectId)?.name ?? '',\n          data: reports,\n          total: reports.reduce((a: number, b: ReportItem) => a + b.amount, 0),\n        };\n      })\n      .sort((a, b) => (a.reportName < b.reportName ? -1 : 1));\n  }\n\n  private prepareTableDataPerGateway(result: ReportItem[]): void {\n    let reduced: ReportItem[][] = result.reduce((r, acc) => {\n      r[acc.gatewayId] = r[acc.gatewayId] || [];\n      r[acc.gatewayId].push({\n        ...acc,\n      });\n\n      return r;\n    }, Object.create(null));\n\n    this.reports = Object.values(reduced)\n      .map((reports: ReportItem[]) => {\n        return {\n          reportName: this.gateways.find((i) => i.gatewayId === reports[0].gatewayId)?.name ?? '',\n          data: reports,\n          total: reports.reduce((a: number, b: ReportItem) => a + b.amount, 0),\n        };\n      })\n      .sort((a, b) => (a.reportName < b.reportName ? -1 : 1));\n\n    this.prepareChartData();\n    this.totalTitle = 'Project total';\n  }\n\n  private prepareChartData(): void {\n    this.showChart = true;\n    this.chart = {\n      series: this.reports.map((i: ReportGrouped) => {\n        return {\n          value: i.data.length,\n          name: i.reportName,\n        };\n      }),\n      color: ['#A259FF', '#F24E1E', '#FFC107', '#6497B1'],\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page-header {\n  display: flex;\n  justify-content: space-between;\n  .page-title {\n    cursor: default;\n    h1 {\n      font-weight: 700;\n      font-size: 24px;\n      line-height: 28px;\n      color: #011f4b;\n    }\n\n    h2 {\n      font-weight: 700;\n      font-size: 16px;\n      line-height: 19px;\n      color: #7e8299;\n    }\n  }\n\n  .filters {\n    display: flex;\n\n    app-dropdown {\n      margin-right: 23px;\n    }\n\n    app-button {\n      margin-top: 10px;\n    }\n  }\n}\n\n.reports {\n  display: flex;\n  flex-direction: row;\n\n  .reports-table {\n    background: #f1fafe;\n    border-radius: 10px;\n    padding: 18px 24px;\n    min-width: 60%;\n    min-height: 473px;\n    width: 100%;\n\n    h3 {\n      font-weight: 700;\n      font-size: 16px;\n      line-height: 19px;\n      cursor: default;\n      color: #011f4b;\n      margin-bottom: 34px;\n    }\n  }\n\n  .reports-chart {\n    margin-left: 31px;\n    width: 70%;\n  }\n}\n\n.total-amount {\n  margin-top: 27px;\n  height: 53px;\n  background: #f1fafe;\n  border-radius: 10px;\n\n  p {\n    font-weight: 700;\n    font-size: 16px;\n    line-height: 19px;\n    cursor: default;\n    color: #011f4b;\n    padding: 17px 29px;\n  }\n}\n",
                    "styleUrl": "./reports-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reportsService",
                        "type": "ReportsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "reportsService",
                        "type": "ReportsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-header\">\n  <div class=\"page-title\">\n    <h1>Reports</h1>\n    <h2>Easily generate a report of your transactions</h2>\n  </div>\n\n  <div class=\"filters\">\n    <app-dropdown [options]=\"projectDropdown\" (itemSelected)=\"updateProjectId($event)\"></app-dropdown>\n    <app-dropdown [options]=\"gatewayDropdown\" (itemSelected)=\"updateGatewayId($event)\"></app-dropdown>\n    <app-datepicker (dateValueChange)=\"updateDateRange($event)\"></app-datepicker>\n    <app-button [btn]=\"generateReport\" (btnClicked)=\"getReports()\"></app-button>\n  </div>\n</div>\n\n<ng-container *ngIf=\"!loading\">\n  <section *ngIf=\"reports.length > 0; else emptyReports\" class=\"reports\">\n    <div class=\"reports-table\">\n      <h3>{{selectedProjectName}} | {{selectedGatewayName}}</h3>\n\n      <ng-container *ngFor=\"let item of reports; let i = index\">\n        <app-accordion [testAttr]=\"item.reportName\" [expanded]=\"i === 0\">\n          <div class=\"accordion-header-content\" *ngIf=\"!showAccordionHeader\">\n            <p>{{item.reportName}}</p>\n            <p>Total: {{item.total | currency:'':'code'}}</p>\n          </div>\n          <div class=\"accordion-body-content\">\n            <app-table [columns]=\"columns\" [datasource]=\"item.data\" [showGateway]=\"showGateway\"></app-table>\n          </div>\n        </app-accordion>\n      </ng-container>\n    </div>\n    <div class=\"reports-chart\" *ngIf=\"showChart\">\n      <app-donut-chart [chartData]=\"chart\" [title]=\"totalTitle\" [amount]=\"totalAmount\"></app-donut-chart>\n    </div>\n  </section>\n\n  <section class=\"total-amount\" *ngIf=\"reports.length > 0 && !showChart\">\n    <p>Total: {{totalAmount | currency:'':'code'}}</p>\n  </section>\n</ng-container>\n\n<ng-template #emptyReports>\n  <app-empty-layout [message]=\"emptyUI\"></app-empty-layout>\n</ng-template>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-d4c3fef5c6896069a3f93dfe771aea7192f08e64f19aae66063d82639d368fba95510c80338ea27a18094f9231ffd81c1bc7918565f3a842689ef96925aba0b2",
            "file": "src/app/shared/ui/table/components/table.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "datasource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ReportItem[]",
                    "decorators": []
                },
                {
                    "name": "showGateway",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { ReportItem } from 'app/reports/models';\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class TableComponent {\n  @Input() columns: string[] = [];\n  @Input() datasource: ReportItem[] = [];\n  @Input() showGateway = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-table {\n  box-shadow: none;\n  width: 100%;\n  cursor: default;\n\n  tr.mat-header-row,\n  tr.mat-row {\n    height: 35px;\n\n    th {\n      font-weight: 400;\n      font-size: 16px;\n      line-height: 26px;\n      color: #011f4b;\n      border: none;\n    }\n\n    td {\n      border: none;\n    }\n  }\n  tbody {\n    background-color: #f1fafe;\n    tr:nth-child(even) {\n      background-color: white;\n    }\n  }\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<table mat-table [dataSource]=\"datasource\" class=\"mat-elevation-z8\" aria-describedby=\"reports-table\">\n  <ng-container matColumnDef=\"date\">\n    <th mat-header-cell *matHeaderCellDef>Date</th>\n    <td mat-cell *matCellDef=\"let element\">{{element.modified}}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"gatewayName\" *ngIf=\"showGateway\">\n    <th mat-header-cell *matHeaderCellDef>Gateway</th>\n    <td mat-cell *matCellDef=\"let element\">{{element.gatewayName}}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"paymentId\">\n    <th mat-header-cell *matHeaderCellDef>Transaction ID</th>\n    <td mat-cell *matCellDef=\"let element\">{{element.paymentId}}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"amount\">\n    <th mat-header-cell *matHeaderCellDef>Amount</th>\n    <td mat-cell *matCellDef=\"let element\">{{element.amount | currency:'':'code'}}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: columns;\"></tr>\n</table>\n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-4417fa531822dabf1d02be76b296dd76d07dec59c28ad8bf2dee825d8e2560478604c3c16ccfcb002f5d0cb9181c2127d937b860148b625fef2abdbd06e1393c",
            "file": "src/app/shared/ui/message/components/toast/toast.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MessageData",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\nimport { MessageData } from '../../models/message-data.interface';\nimport { ToastService } from '../../services/toast.service';\n\n@Component({\n  selector: 'app-toast',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./toast.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ToastComponent {\n  constructor(@Inject(MAT_SNACK_BAR_DATA) public data: MessageData, private toastService: ToastService) {}\n\n  public close(): void {\n    this.toastService.dismissSnackBar();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "MessageData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "MessageData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"snack-container\">\n  <div class=\"message-box\">\n    <p class=\"title\">{{ data.title }}</p>\n    <p class=\"message\" *ngIf=\"data.message !== ''\">{{ data.message }}</p>\n  </div>\n  <button class=\"close-btn\" (click)=\"close()\" aria-label=\"Close\">\n    <mat-icon svgIcon=\"close\"></mat-icon>\n  </button>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-dbb87ad8145738ff9e23575077c300ea67c93f80eff92332f94559387caf24cc34e34aa05caf096fbf1b8d14b3299943e92b6b7409daae0cb538c023d827ec47",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { DEFAULT_CURRENCY_CODE, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CoreModule } from '@core/core.module';\nimport { CustomMaterialModule } from '@custom-material/custom-material.module';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule, BrowserAnimationsModule, CoreModule, CustomMaterialModule, SharedModule],\n  bootstrap: [AppComponent],\n  providers: [\n    {\n      provide: DEFAULT_CURRENCY_CODE,\n      useValue: 'USD',\n    },\n  ],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "CustomMaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-d3d13fc70cec9d4ee2d93d9de3884d5147ce29737bca79d2a22f9aa8c169919d6fa63661e7a36df19a1aefe9a72aee39e647c244363babaeb81e5f44da8721ed",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'reports',\n    loadChildren: () => \"import('./reports/reports.module').then((module) => module.ReportsModule)\",\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-4279ec967e348085e9e2162c8558bcddcbc1cebb5db99cbd7e4d39905212e377e0c7ac451b76e324e5d494c9fa418119619aff7fd19fc865ca0367314fe4148a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { APP_BASE_HREF, CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CustomMaterialModule } from '@custom-material/custom-material.module';\nimport { LoaderInterceptor } from '@loader';\nimport { SharedModule } from 'app/shared/shared.module';\nimport { EnsureModuleImportedOnceGuard } from './guards/ensure-module-imported-once.guard';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\nimport { LayoutComponent } from './layout/layout.component';\n\n@NgModule({\n  declarations: [LayoutComponent],\n  imports: [CommonModule, RouterModule, HttpClientModule, CustomMaterialModule, SharedModule],\n  providers: [\n    { provide: APP_BASE_HREF, useValue: '/' },\n    { provide: HTTP_INTERCEPTORS, useClass: LoaderInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  ],\n})\nexport class CoreModule extends EnsureModuleImportedOnceGuard {\n  // Looks for the module in the parent injector to see if it's already been loaded (only want it loaded once)\n  constructor(@SkipSelf() @Optional() parent: CoreModule) {\n    super(parent, 'CoreModule');\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "LoaderInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CustomMaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomMaterialModule",
            "id": "module-CustomMaterialModule-ad4f9d1a60d79eb3463dfc629953daf17a9be141312b2404cdb57cd36dd390418a4b60088de733f83b3cba036fcb689f85c431eea25f3584a7eac0b344b8dde0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/custom-material/custom-material.module.ts",
            "methods": [],
            "sourceCode": "import { A11yModule } from '@angular/cdk/a11y';\nimport { CdkAccordionModule } from '@angular/cdk/accordion';\nimport { NgModule } from '@angular/core';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule, MatIconRegistry } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nconst modules = [\n  MatInputModule,\n  A11yModule,\n  MatProgressSpinnerModule,\n  MatSidenavModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatListModule,\n  MatSnackBarModule,\n  MatSelectModule,\n  CdkAccordionModule,\n  MatTableModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatFormFieldModule,\n];\n\n@NgModule({\n  imports: [...modules],\n  exports: [...modules],\n})\nexport class CustomMaterialModule {\n  constructor(private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer) {\n    // Sidebar Icons\n    this.matIconRegistry.addSvgIcon(\n      'option-one',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/option-one.svg'),\n    );\n    this.matIconRegistry.addSvgIcon(\n      'option-two',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/option-two.svg'),\n    );\n    this.matIconRegistry.addSvgIcon(\n      'option-three',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/option-three.svg'),\n    );\n    this.matIconRegistry.addSvgIcon(\n      'option-five',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/option-five.svg'),\n    );\n    this.matIconRegistry.addSvgIcon(\n      'reports',\n      this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/sidebar/reports.svg'),\n    );\n    //Icons\n    this.matIconRegistry.addSvgIcon('menu-xpto', this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/icons/menu.svg'));\n    //Others\n    this.matIconRegistry.addSvgIcon('logo', this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/images/logo.svg'));\n    this.matIconRegistry.addSvgIcon('empty', this.domSanitizer.bypassSecurityTrustResourceUrl('../../assets/images/empty.svg'));\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ReportsModule",
            "id": "module-ReportsModule-b0a9fff1df536a18e82609bbde4f8e843a4ebb1a957761180df5880594d84d39bdf4c10c599de1f650f2c6f81191b6d48a71b884a75bb7cafcf1ffeed8d3551d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/reports/reports.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CustomMaterialModule } from '@custom-material/custom-material.module';\nimport { SharedModule } from 'app/shared/shared.module';\n\nimport { ReportsLayoutComponent } from './components/reports-layout/reports-layout.component';\nimport { ReportsRoutingModule } from './reports-routing.module';\n\n@NgModule({\n  declarations: [ReportsLayoutComponent],\n  imports: [CommonModule, ReportsRoutingModule, HttpClientModule, CustomMaterialModule, SharedModule],\n})\nexport class ReportsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ReportsLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CustomMaterialModule"
                        },
                        {
                            "name": "ReportsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ReportsRoutingModule",
            "id": "module-ReportsRoutingModule-5b15454a5aecfdfb8bd92f5a7445103ff9faf269bf1c91c46b43c831e834973f956802d560226c2341e8ac52f71eaefdfb4ac0bdcea3dfe2f04c9603fce29428",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/reports/reports-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LayoutComponent } from '@core/layout/layout.component';\nimport { ReportsLayoutComponent } from './components/reports-layout/reports-layout.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LayoutComponent,\n    canActivateChild: [],\n    children: [{ path: '', component: ReportsLayoutComponent }],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ReportsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-f2633f1fd98a60aa209693513a3b225a4d438fef6ab733a83c2993ab41d011f15449dd4de4971ac95c0f518e36bdaae82f2a476940da0fa44e9e8c6341d697ad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { AccordionComponent } from '@accordion';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ButtonComponent } from '@button';\nimport { CustomMaterialModule } from '@custom-material/custom-material.module';\nimport { DatepickerComponent } from '@datepicker';\nimport { DonutChartComponent } from '@donut-chart';\nimport { DropdownComponent } from '@dropdown';\nimport { EmptyLayoutComponent } from '@empty-layout';\nimport { LoaderComponent } from '@loader';\nimport { ToastComponent } from '@message';\nimport { InitialsPipe } from '@pipes';\nimport { TableComponent } from '@table';\nimport { NgxEchartsModule } from 'ngx-echarts';\n\nconst modules = [\n  ButtonComponent,\n  DatepickerComponent,\n  DonutChartComponent,\n  DropdownComponent,\n  EmptyLayoutComponent,\n  LoaderComponent,\n  TableComponent,\n  ToastComponent,\n  AccordionComponent,\n];\n\nconst pipes = [InitialsPipe];\n\n@NgModule({\n  declarations: [...modules, ...pipes],\n  exports: [...modules, ...pipes],\n  imports: [\n    CommonModule,\n    RouterModule,\n    CustomMaterialModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    NgxEchartsModule.forRoot({\n      echarts: () => import('echarts'),\n    }),\n  ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InitialsPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CustomMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InitialsPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AccordionWithComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: AccordionComponent,\n  template: `\n      <div style=\"width: 800px\">\n        <app-accordion [testAttr]=\"'1'\">\n          <div class=\"accordion-header-content\">\n            ${header}\n          </div>\n          <div class=\"accordion-body-content\">\n            ${emptyComponent}\n          </div>\n        </app-accordion>\n      </div>\n    `,\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: AccordionComponent,\n  template: `\n    <div style=\"width: 800px\">\n      <app-accordion [testAttr]=\"'items'\">\n        <div class=\"accordion-header-content\">\n          ${header}\n        </div>\n        <div class=\"accordion-body-content\">\n          ${LONG_TEXT}\n        </div>\n      </app-accordion>\n    </div>\n  `,\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/DonutChart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "emptyComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`<app-empty-layout\n  [message]=\"{\n    title: 'title',\n    content: 'content',\n    img: 'empty',\n  }\">\n  </app-empty-layout>`"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  api: \"http://178.63.13.157:8090/mock-api/api\"\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  api: \"http://178.63.13.157:8090/mock-api/api\"\n}"
            },
            {
                "name": "header",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n<mat-card class=\"card\">\n  <mat-card-content>\n      <mat-icon class=\"icon-prefix\" [svgIcon]=\"'overview'\" aria-hidden=\"true\"></mat-icon>\n      <p>Insight centre dashboard</p>\n  </mat-card-content>\n</mat-card>`"
            },
            {
                "name": "LONG_TEXT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ' +\n  'incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud ' +\n  'exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure ' +\n  'dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. ' +\n  'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt ' +\n  'mollit anim id est laborum.'"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/custom-material/custom-material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatInputModule,\n  A11yModule,\n  MatProgressSpinnerModule,\n  MatSidenavModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatListModule,\n  MatSnackBarModule,\n  MatSelectModule,\n  CdkAccordionModule,\n  MatTableModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatFormFieldModule,\n]"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ButtonComponent,\n  DatepickerComponent,\n  DonutChartComponent,\n  DropdownComponent,\n  EmptyLayoutComponent,\n  LoaderComponent,\n  TableComponent,\n  ToastComponent,\n  AccordionComponent,\n]"
            },
            {
                "name": "pipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[InitialsPipe]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n  template: `<app-button [btn]=\"btn\" [disabled]=\"disabled\"></app-button>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/DonutChart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DonutChartComponent>",
                "defaultValue": "(args: DonutChartComponent) => ({\n  component: DonutChartComponent,\n  props: args,\n  template: `<app-donut-chart\n              [chartData]=\"chartData\">\n            </app-donut-chart>\n`,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MessageType",
                "childs": [
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "Info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "Alert",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "alert"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/ui/message/enums/message-type.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/Accordion.stories.ts": [
                {
                    "name": "AccordionWithComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: AccordionComponent,\n  template: `\n      <div style=\"width: 800px\">\n        <app-accordion [testAttr]=\"'1'\">\n          <div class=\"accordion-header-content\">\n            ${header}\n          </div>\n          <div class=\"accordion-body-content\">\n            ${emptyComponent}\n          </div>\n        </app-accordion>\n      </div>\n    `,\n})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: AccordionComponent,\n  template: `\n    <div style=\"width: 800px\">\n      <app-accordion [testAttr]=\"'items'\">\n        <div class=\"accordion-header-content\">\n          ${header}\n        </div>\n        <div class=\"accordion-body-content\">\n          ${LONG_TEXT}\n        </div>\n      </app-accordion>\n    </div>\n  `,\n})"
                },
                {
                    "name": "emptyComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`<app-empty-layout\n  [message]=\"{\n    title: 'title',\n    content: 'content',\n    img: 'empty',\n  }\">\n  </app-empty-layout>`"
                },
                {
                    "name": "header",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n<mat-card class=\"card\">\n  <mat-card-content>\n      <mat-icon class=\"icon-prefix\" [svgIcon]=\"'overview'\" aria-hidden=\"true\"></mat-icon>\n      <p>Insight centre dashboard</p>\n  </mat-card-content>\n</mat-card>`"
                },
                {
                    "name": "LONG_TEXT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ' +\n  'incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud ' +\n  'exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure ' +\n  'dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. ' +\n  'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt ' +\n  'mollit anim id est laborum.'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n  template: `<app-button [btn]=\"btn\" [disabled]=\"disabled\"></app-button>`,\n})"
                }
            ],
            "src/stories/DonutChart.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/DonutChart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/DonutChart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DonutChartComponent>",
                    "defaultValue": "(args: DonutChartComponent) => ({\n  component: DonutChartComponent,\n  props: args,\n  template: `<app-donut-chart\n              [chartData]=\"chartData\">\n            </app-donut-chart>\n`,\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  api: \"http://178.63.13.157:8090/mock-api/api\"\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  api: \"http://178.63.13.157:8090/mock-api/api\"\n}"
                }
            ],
            "src/app/custom-material/custom-material.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/custom-material/custom-material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatInputModule,\n  A11yModule,\n  MatProgressSpinnerModule,\n  MatSidenavModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatListModule,\n  MatSnackBarModule,\n  MatSelectModule,\n  CdkAccordionModule,\n  MatTableModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatFormFieldModule,\n]"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ButtonComponent,\n  DatepickerComponent,\n  DonutChartComponent,\n  DropdownComponent,\n  EmptyLayoutComponent,\n  LoaderComponent,\n  TableComponent,\n  ToastComponent,\n  AccordionComponent,\n]"
                },
                {
                    "name": "pipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[InitialsPipe]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/shared/ui/message/enums/message-type.enum.ts": [
                {
                    "name": "MessageType",
                    "childs": [
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "Info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "Alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "alert"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/ui/message/enums/message-type.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "reports",
                        "loadChildren": "./reports/reports.module#ReportsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/reports/reports-routing.module.ts",
                                        "module": "ReportsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "LayoutComponent",
                                                "canActivateChild": [],
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "ReportsLayoutComponent"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ReportsModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/ensure-module-imported-once.guard.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EnsureModuleImportedOnceGuard",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user-item.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/users.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Users",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/global-error-handler/global-error-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalErrorHandlerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/custom-material/custom-material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/components/reports-layout/reports-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReportsLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/models/gateway-item.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GatewayItem",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/models/gateways.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Gateways",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/models/project-item.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectItem",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/models/projects.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Projects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/models/report-filters.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReportFilters",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/models/report-item.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReportItem",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/models/reports-grouped.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReportGrouped",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/models/reports.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Reports",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reports/services/reports.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReportsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/initials/initials.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "InitialsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/accordion/components/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/button/components/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/button/models/button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/datepicker/components/datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/datepicker/models/date-range.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateRange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/components/donut-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DonutChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/models/donut-chart-data-points.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DonutChartDataPoints",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/models/donut-chart-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DonutChartData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/donut-chart/models/donut-chart.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DonutChart",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/dropdown/components/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/dropdown/models/dropdown-item.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/dropdown/models/dropdown-options.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DropdownOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/empty-layout/components/empty-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmptyLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/empty-layout/models/empty-message.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EmptyMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loader/components/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loader/interceptors/loader.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "LoaderInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loader/mocks/loader-consumer.mock.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoaderConsumer",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/loader/services/loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/message/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/message/models/message-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MessageData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/message/services/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui/table/components/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AccordionWithComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "header",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LONG_TEXT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/DonutChart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/DonutChart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}